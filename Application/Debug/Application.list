
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08005000  08005000  00005000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000268c  0800510c  0800510c  0000510c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08007798  08007798  00007798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800787c  0800787c  00010070  2**0
                  CONTENTS
  4 .ARM          00000000  0800787c  0800787c  00010070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800787c  0800787c  00010070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800787c  0800787c  0000787c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007880  08007880  00007880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007884  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  080078f4  00010070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080078f4  000100ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007474  00000000  00000000  00010099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015d8  00000000  00000000  0001750d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006e8  00000000  00000000  00018ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000650  00000000  00000000  000191d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001789f  00000000  00000000  00019820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008412  00000000  00000000  000310bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000836b0  00000000  00000000  000394d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bcb81  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000222c  00000000  00000000  000bcbd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800510c <__do_global_dtors_aux>:
 800510c:	b510      	push	{r4, lr}
 800510e:	4c05      	ldr	r4, [pc, #20]	; (8005124 <__do_global_dtors_aux+0x18>)
 8005110:	7823      	ldrb	r3, [r4, #0]
 8005112:	b933      	cbnz	r3, 8005122 <__do_global_dtors_aux+0x16>
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <__do_global_dtors_aux+0x1c>)
 8005116:	b113      	cbz	r3, 800511e <__do_global_dtors_aux+0x12>
 8005118:	4804      	ldr	r0, [pc, #16]	; (800512c <__do_global_dtors_aux+0x20>)
 800511a:	f3af 8000 	nop.w
 800511e:	2301      	movs	r3, #1
 8005120:	7023      	strb	r3, [r4, #0]
 8005122:	bd10      	pop	{r4, pc}
 8005124:	20000070 	.word	0x20000070
 8005128:	00000000 	.word	0x00000000
 800512c:	08007780 	.word	0x08007780

08005130 <frame_dummy>:
 8005130:	b508      	push	{r3, lr}
 8005132:	4b03      	ldr	r3, [pc, #12]	; (8005140 <frame_dummy+0x10>)
 8005134:	b11b      	cbz	r3, 800513e <frame_dummy+0xe>
 8005136:	4903      	ldr	r1, [pc, #12]	; (8005144 <frame_dummy+0x14>)
 8005138:	4803      	ldr	r0, [pc, #12]	; (8005148 <frame_dummy+0x18>)
 800513a:	f3af 8000 	nop.w
 800513e:	bd08      	pop	{r3, pc}
 8005140:	00000000 	.word	0x00000000
 8005144:	20000074 	.word	0x20000074
 8005148:	08007780 	.word	0x08007780

0800514c <ToggleTestLed>:
/* ******************Critical Definition *******************/
#define APPLICATION_START_MEMORY_ADDRESS		0x8030000
#define BUS_SIZE_IN_BYTES						4

void ToggleTestLed(void)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	af00      	add	r7, sp, #0
	/*Toggling the Test Led in the Bluepill board*/
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8005150:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005154:	4802      	ldr	r0, [pc, #8]	; (8005160 <ToggleTestLed+0x14>)
 8005156:	f000 fd53 	bl	8005c00 <HAL_GPIO_TogglePin>
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	40011000 	.word	0x40011000

08005164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005168:	f000 fa44 	bl	80055f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800516c:	f000 f81c 	bl	80051a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005170:	f000 f880 	bl	8005274 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8005174:	f000 f854 	bl	8005220 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application (%d.%d)\n",APP_Version[0],APP_Version[1]);
 8005178:	2300      	movs	r3, #0
 800517a:	2201      	movs	r2, #1
 800517c:	4619      	mov	r1, r3
 800517e:	4808      	ldr	r0, [pc, #32]	; (80051a0 <main+0x3c>)
 8005180:	f001 fb6a 	bl	8006858 <iprintf>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13,GPIO_PIN_RESET);
 8005184:	2200      	movs	r2, #0
 8005186:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800518a:	4806      	ldr	r0, [pc, #24]	; (80051a4 <main+0x40>)
 800518c:	f000 fd20 	bl	8005bd0 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ToggleTestLed();
 8005190:	f7ff ffdc 	bl	800514c <ToggleTestLed>
	  HAL_Delay(3000);
 8005194:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005198:	f000 fa8e 	bl	80056b8 <HAL_Delay>
	  ToggleTestLed();
 800519c:	e7f8      	b.n	8005190 <main+0x2c>
 800519e:	bf00      	nop
 80051a0:	08007798 	.word	0x08007798
 80051a4:	40011000 	.word	0x40011000

080051a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b090      	sub	sp, #64	; 0x40
 80051ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051ae:	f107 0318 	add.w	r3, r7, #24
 80051b2:	2228      	movs	r2, #40	; 0x28
 80051b4:	2100      	movs	r1, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f001 fb46 	bl	8006848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051bc:	1d3b      	adds	r3, r7, #4
 80051be:	2200      	movs	r2, #0
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	605a      	str	r2, [r3, #4]
 80051c4:	609a      	str	r2, [r3, #8]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80051ca:	2302      	movs	r3, #2
 80051cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80051ce:	2301      	movs	r3, #1
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80051d2:	2310      	movs	r3, #16
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80051da:	f107 0318 	add.w	r3, r7, #24
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fd28 	bl	8005c34 <HAL_RCC_OscConfig>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80051ea:	f000 f895 	bl	8005318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80051ee:	230f      	movs	r3, #15
 80051f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80051fa:	2300      	movs	r3, #0
 80051fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005202:	1d3b      	adds	r3, r7, #4
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 ff96 	bl	8006138 <HAL_RCC_ClockConfig>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8005212:	f000 f881 	bl	8005318 <Error_Handler>
  }
}
 8005216:	bf00      	nop
 8005218:	3740      	adds	r7, #64	; 0x40
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005226:	4a12      	ldr	r2, [pc, #72]	; (8005270 <MX_USART1_UART_Init+0x50>)
 8005228:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800522a:	4b10      	ldr	r3, [pc, #64]	; (800526c <MX_USART1_UART_Init+0x4c>)
 800522c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005230:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005232:	4b0e      	ldr	r3, [pc, #56]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005234:	2200      	movs	r2, #0
 8005236:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005238:	4b0c      	ldr	r3, [pc, #48]	; (800526c <MX_USART1_UART_Init+0x4c>)
 800523a:	2200      	movs	r2, #0
 800523c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800523e:	4b0b      	ldr	r3, [pc, #44]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005240:	2200      	movs	r2, #0
 8005242:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005246:	220c      	movs	r2, #12
 8005248:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800524a:	4b08      	ldr	r3, [pc, #32]	; (800526c <MX_USART1_UART_Init+0x4c>)
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005250:	4b06      	ldr	r3, [pc, #24]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005252:	2200      	movs	r2, #0
 8005254:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005256:	4805      	ldr	r0, [pc, #20]	; (800526c <MX_USART1_UART_Init+0x4c>)
 8005258:	f001 f8fc 	bl	8006454 <HAL_UART_Init>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8005262:	f000 f859 	bl	8005318 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005266:	bf00      	nop
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	2000008c 	.word	0x2000008c
 8005270:	40013800 	.word	0x40013800

08005274 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	2200      	movs	r2, #0
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	605a      	str	r2, [r3, #4]
 8005284:	609a      	str	r2, [r3, #8]
 8005286:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005288:	4b18      	ldr	r3, [pc, #96]	; (80052ec <MX_GPIO_Init+0x78>)
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	4a17      	ldr	r2, [pc, #92]	; (80052ec <MX_GPIO_Init+0x78>)
 800528e:	f043 0310 	orr.w	r3, r3, #16
 8005292:	6193      	str	r3, [r2, #24]
 8005294:	4b15      	ldr	r3, [pc, #84]	; (80052ec <MX_GPIO_Init+0x78>)
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80052a0:	4b12      	ldr	r3, [pc, #72]	; (80052ec <MX_GPIO_Init+0x78>)
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	4a11      	ldr	r2, [pc, #68]	; (80052ec <MX_GPIO_Init+0x78>)
 80052a6:	f043 0304 	orr.w	r3, r3, #4
 80052aa:	6193      	str	r3, [r2, #24]
 80052ac:	4b0f      	ldr	r3, [pc, #60]	; (80052ec <MX_GPIO_Init+0x78>)
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	f003 0304 	and.w	r3, r3, #4
 80052b4:	603b      	str	r3, [r7, #0]
 80052b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80052b8:	2200      	movs	r2, #0
 80052ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80052be:	480c      	ldr	r0, [pc, #48]	; (80052f0 <MX_GPIO_Init+0x7c>)
 80052c0:	f000 fc86 	bl	8005bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80052c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052ca:	2301      	movs	r3, #1
 80052cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ce:	2300      	movs	r3, #0
 80052d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d2:	2302      	movs	r3, #2
 80052d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052d6:	f107 0308 	add.w	r3, r7, #8
 80052da:	4619      	mov	r1, r3
 80052dc:	4804      	ldr	r0, [pc, #16]	; (80052f0 <MX_GPIO_Init+0x7c>)
 80052de:	f000 faf3 	bl	80058c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40011000 	.word	0x40011000

080052f4 <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80052fc:	1d39      	adds	r1, r7, #4
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	2201      	movs	r2, #1
 8005304:	4803      	ldr	r0, [pc, #12]	; (8005314 <__io_putchar+0x20>)
 8005306:	f001 f8f5 	bl	80064f4 <HAL_UART_Transmit>

  return ch;
 800530a:	687b      	ldr	r3, [r7, #4]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3708      	adds	r7, #8
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	2000008c 	.word	0x2000008c

08005318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800531c:	b672      	cpsid	i
}
 800531e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005320:	e7fe      	b.n	8005320 <Error_Handler+0x8>
	...

08005324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800532a:	4b0e      	ldr	r3, [pc, #56]	; (8005364 <HAL_MspInit+0x40>)
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	4a0d      	ldr	r2, [pc, #52]	; (8005364 <HAL_MspInit+0x40>)
 8005330:	f043 0301 	orr.w	r3, r3, #1
 8005334:	6193      	str	r3, [r2, #24]
 8005336:	4b0b      	ldr	r3, [pc, #44]	; (8005364 <HAL_MspInit+0x40>)
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	607b      	str	r3, [r7, #4]
 8005340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005342:	4b08      	ldr	r3, [pc, #32]	; (8005364 <HAL_MspInit+0x40>)
 8005344:	69db      	ldr	r3, [r3, #28]
 8005346:	4a07      	ldr	r2, [pc, #28]	; (8005364 <HAL_MspInit+0x40>)
 8005348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800534c:	61d3      	str	r3, [r2, #28]
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_MspInit+0x40>)
 8005350:	69db      	ldr	r3, [r3, #28]
 8005352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	40021000 	.word	0x40021000

08005368 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b088      	sub	sp, #32
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005370:	f107 0310 	add.w	r3, r7, #16
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
 800537a:	609a      	str	r2, [r3, #8]
 800537c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <HAL_UART_MspInit+0x8c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d131      	bne.n	80053ec <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005388:	4b1b      	ldr	r3, [pc, #108]	; (80053f8 <HAL_UART_MspInit+0x90>)
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	4a1a      	ldr	r2, [pc, #104]	; (80053f8 <HAL_UART_MspInit+0x90>)
 800538e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005392:	6193      	str	r3, [r2, #24]
 8005394:	4b18      	ldr	r3, [pc, #96]	; (80053f8 <HAL_UART_MspInit+0x90>)
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053a0:	4b15      	ldr	r3, [pc, #84]	; (80053f8 <HAL_UART_MspInit+0x90>)
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	4a14      	ldr	r2, [pc, #80]	; (80053f8 <HAL_UART_MspInit+0x90>)
 80053a6:	f043 0304 	orr.w	r3, r3, #4
 80053aa:	6193      	str	r3, [r2, #24]
 80053ac:	4b12      	ldr	r3, [pc, #72]	; (80053f8 <HAL_UART_MspInit+0x90>)
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80053b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053be:	2302      	movs	r3, #2
 80053c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053c6:	f107 0310 	add.w	r3, r7, #16
 80053ca:	4619      	mov	r1, r3
 80053cc:	480b      	ldr	r0, [pc, #44]	; (80053fc <HAL_UART_MspInit+0x94>)
 80053ce:	f000 fa7b 	bl	80058c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80053d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053dc:	2300      	movs	r3, #0
 80053de:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053e0:	f107 0310 	add.w	r3, r7, #16
 80053e4:	4619      	mov	r1, r3
 80053e6:	4805      	ldr	r0, [pc, #20]	; (80053fc <HAL_UART_MspInit+0x94>)
 80053e8:	f000 fa6e 	bl	80058c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80053ec:	bf00      	nop
 80053ee:	3720      	adds	r7, #32
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	40013800 	.word	0x40013800
 80053f8:	40021000 	.word	0x40021000
 80053fc:	40010800 	.word	0x40010800

08005400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005400:	b480      	push	{r7}
 8005402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005404:	e7fe      	b.n	8005404 <NMI_Handler+0x4>

08005406 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005406:	b480      	push	{r7}
 8005408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800540a:	e7fe      	b.n	800540a <HardFault_Handler+0x4>

0800540c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800540c:	b480      	push	{r7}
 800540e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005410:	e7fe      	b.n	8005410 <MemManage_Handler+0x4>

08005412 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005412:	b480      	push	{r7}
 8005414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005416:	e7fe      	b.n	8005416 <BusFault_Handler+0x4>

08005418 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800541c:	e7fe      	b.n	800541c <UsageFault_Handler+0x4>

0800541e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800541e:	b480      	push	{r7}
 8005420:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005422:	bf00      	nop
 8005424:	46bd      	mov	sp, r7
 8005426:	bc80      	pop	{r7}
 8005428:	4770      	bx	lr

0800542a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800542a:	b480      	push	{r7}
 800542c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800542e:	bf00      	nop
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800543a:	bf00      	nop
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005442:	b580      	push	{r7, lr}
 8005444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005446:	f000 f91b 	bl	8005680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800544a:	bf00      	nop
 800544c:	bd80      	pop	{r7, pc}

0800544e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af00      	add	r7, sp, #0
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	60b9      	str	r1, [r7, #8]
 8005458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800545a:	2300      	movs	r3, #0
 800545c:	617b      	str	r3, [r7, #20]
 800545e:	e00a      	b.n	8005476 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005460:	f3af 8000 	nop.w
 8005464:	4601      	mov	r1, r0
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	60ba      	str	r2, [r7, #8]
 800546c:	b2ca      	uxtb	r2, r1
 800546e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	3301      	adds	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	429a      	cmp	r2, r3
 800547c:	dbf0      	blt.n	8005460 <_read+0x12>
  }

  return len;
 800547e:	687b      	ldr	r3, [r7, #4]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005494:	2300      	movs	r3, #0
 8005496:	617b      	str	r3, [r7, #20]
 8005498:	e009      	b.n	80054ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	60ba      	str	r2, [r7, #8]
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff ff26 	bl	80052f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	3301      	adds	r3, #1
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	dbf1      	blt.n	800549a <_write+0x12>
  }
  return len;
 80054b6:	687b      	ldr	r3, [r7, #4]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3718      	adds	r7, #24
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <_close>:

int _close(int file)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80054c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
 80054de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054e6:	605a      	str	r2, [r3, #4]
  return 0;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	370c      	adds	r7, #12
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <_isatty>:

int _isatty(int file)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b083      	sub	sp, #12
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80054fc:	2301      	movs	r3, #1
}
 80054fe:	4618      	mov	r0, r3
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3714      	adds	r7, #20
 800551a:	46bd      	mov	sp, r7
 800551c:	bc80      	pop	{r7}
 800551e:	4770      	bx	lr

08005520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005528:	4a14      	ldr	r2, [pc, #80]	; (800557c <_sbrk+0x5c>)
 800552a:	4b15      	ldr	r3, [pc, #84]	; (8005580 <_sbrk+0x60>)
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005534:	4b13      	ldr	r3, [pc, #76]	; (8005584 <_sbrk+0x64>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800553c:	4b11      	ldr	r3, [pc, #68]	; (8005584 <_sbrk+0x64>)
 800553e:	4a12      	ldr	r2, [pc, #72]	; (8005588 <_sbrk+0x68>)
 8005540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <_sbrk+0x64>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d207      	bcs.n	8005560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005550:	f001 f950 	bl	80067f4 <__errno>
 8005554:	4603      	mov	r3, r0
 8005556:	220c      	movs	r2, #12
 8005558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800555a:	f04f 33ff 	mov.w	r3, #4294967295
 800555e:	e009      	b.n	8005574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005560:	4b08      	ldr	r3, [pc, #32]	; (8005584 <_sbrk+0x64>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <_sbrk+0x64>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	4a05      	ldr	r2, [pc, #20]	; (8005584 <_sbrk+0x64>)
 8005570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20005000 	.word	0x20005000
 8005580:	00000400 	.word	0x00000400
 8005584:	200000d4 	.word	0x200000d4
 8005588:	200000f0 	.word	0x200000f0

0800558c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <SystemInit+0x14>)
 8005592:	4a04      	ldr	r2, [pc, #16]	; (80055a4 <SystemInit+0x18>)
 8005594:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000ed00 	.word	0xe000ed00
 80055a4:	08050000 	.word	0x08050000

080055a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80055a8:	f7ff fff0 	bl	800558c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80055ac:	480b      	ldr	r0, [pc, #44]	; (80055dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80055ae:	490c      	ldr	r1, [pc, #48]	; (80055e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80055b0:	4a0c      	ldr	r2, [pc, #48]	; (80055e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055b4:	e002      	b.n	80055bc <LoopCopyDataInit>

080055b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055ba:	3304      	adds	r3, #4

080055bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c0:	d3f9      	bcc.n	80055b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80055c4:	4c09      	ldr	r4, [pc, #36]	; (80055ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055c8:	e001      	b.n	80055ce <LoopFillZerobss>

080055ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055cc:	3204      	adds	r2, #4

080055ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d0:	d3fb      	bcc.n	80055ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055d2:	f001 f915 	bl	8006800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055d6:	f7ff fdc5 	bl	8005164 <main>
  bx lr
 80055da:	4770      	bx	lr
  ldr r0, =_sdata
 80055dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055e0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80055e4:	08007884 	.word	0x08007884
  ldr r2, =_sbss
 80055e8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80055ec:	200000ec 	.word	0x200000ec

080055f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055f0:	e7fe      	b.n	80055f0 <ADC1_2_IRQHandler>
	...

080055f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80055f8:	4b08      	ldr	r3, [pc, #32]	; (800561c <HAL_Init+0x28>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a07      	ldr	r2, [pc, #28]	; (800561c <HAL_Init+0x28>)
 80055fe:	f043 0310 	orr.w	r3, r3, #16
 8005602:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005604:	2003      	movs	r0, #3
 8005606:	f000 f92b 	bl	8005860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800560a:	200f      	movs	r0, #15
 800560c:	f000 f808 	bl	8005620 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005610:	f7ff fe88 	bl	8005324 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005614:	2300      	movs	r3, #0
}
 8005616:	4618      	mov	r0, r3
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40022000 	.word	0x40022000

08005620 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005628:	4b12      	ldr	r3, [pc, #72]	; (8005674 <HAL_InitTick+0x54>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <HAL_InitTick+0x58>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	4619      	mov	r1, r3
 8005632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005636:	fbb3 f3f1 	udiv	r3, r3, r1
 800563a:	fbb2 f3f3 	udiv	r3, r2, r3
 800563e:	4618      	mov	r0, r3
 8005640:	f000 f935 	bl	80058ae <HAL_SYSTICK_Config>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e00e      	b.n	800566c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b0f      	cmp	r3, #15
 8005652:	d80a      	bhi.n	800566a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005654:	2200      	movs	r2, #0
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	f04f 30ff 	mov.w	r0, #4294967295
 800565c:	f000 f90b 	bl	8005876 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005660:	4a06      	ldr	r2, [pc, #24]	; (800567c <HAL_InitTick+0x5c>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	e000      	b.n	800566c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000000 	.word	0x20000000
 8005678:	20000008 	.word	0x20000008
 800567c:	20000004 	.word	0x20000004

08005680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_IncTick+0x1c>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_IncTick+0x20>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4413      	add	r3, r2
 8005690:	4a03      	ldr	r2, [pc, #12]	; (80056a0 <HAL_IncTick+0x20>)
 8005692:	6013      	str	r3, [r2, #0]
}
 8005694:	bf00      	nop
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr
 800569c:	20000008 	.word	0x20000008
 80056a0:	200000d8 	.word	0x200000d8

080056a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return uwTick;
 80056a8:	4b02      	ldr	r3, [pc, #8]	; (80056b4 <HAL_GetTick+0x10>)
 80056aa:	681b      	ldr	r3, [r3, #0]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bc80      	pop	{r7}
 80056b2:	4770      	bx	lr
 80056b4:	200000d8 	.word	0x200000d8

080056b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056c0:	f7ff fff0 	bl	80056a4 <HAL_GetTick>
 80056c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d0:	d005      	beq.n	80056de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_Delay+0x44>)
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056de:	bf00      	nop
 80056e0:	f7ff ffe0 	bl	80056a4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d8f7      	bhi.n	80056e0 <HAL_Delay+0x28>
  {
  }
}
 80056f0:	bf00      	nop
 80056f2:	bf00      	nop
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000008 	.word	0x20000008

08005700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005700:	b480      	push	{r7}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	f003 0307 	and.w	r3, r3, #7
 800570e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800571c:	4013      	ands	r3, r2
 800571e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800572c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005732:	4a04      	ldr	r2, [pc, #16]	; (8005744 <__NVIC_SetPriorityGrouping+0x44>)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	60d3      	str	r3, [r2, #12]
}
 8005738:	bf00      	nop
 800573a:	3714      	adds	r7, #20
 800573c:	46bd      	mov	sp, r7
 800573e:	bc80      	pop	{r7}
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	e000ed00 	.word	0xe000ed00

08005748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <__NVIC_GetPriorityGrouping+0x18>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	0a1b      	lsrs	r3, r3, #8
 8005752:	f003 0307 	and.w	r3, r3, #7
}
 8005756:	4618      	mov	r0, r3
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	e000ed00 	.word	0xe000ed00

08005764 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005764:	b480      	push	{r7}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	6039      	str	r1, [r7, #0]
 800576e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005774:	2b00      	cmp	r3, #0
 8005776:	db0a      	blt.n	800578e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	b2da      	uxtb	r2, r3
 800577c:	490c      	ldr	r1, [pc, #48]	; (80057b0 <__NVIC_SetPriority+0x4c>)
 800577e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005782:	0112      	lsls	r2, r2, #4
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	440b      	add	r3, r1
 8005788:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800578c:	e00a      	b.n	80057a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4908      	ldr	r1, [pc, #32]	; (80057b4 <__NVIC_SetPriority+0x50>)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	f003 030f 	and.w	r3, r3, #15
 800579a:	3b04      	subs	r3, #4
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	440b      	add	r3, r1
 80057a2:	761a      	strb	r2, [r3, #24]
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bc80      	pop	{r7}
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	e000e100 	.word	0xe000e100
 80057b4:	e000ed00 	.word	0xe000ed00

080057b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b089      	sub	sp, #36	; 0x24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f003 0307 	and.w	r3, r3, #7
 80057ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f1c3 0307 	rsb	r3, r3, #7
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	bf28      	it	cs
 80057d6:	2304      	movcs	r3, #4
 80057d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	3304      	adds	r3, #4
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d902      	bls.n	80057e8 <NVIC_EncodePriority+0x30>
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	3b03      	subs	r3, #3
 80057e6:	e000      	b.n	80057ea <NVIC_EncodePriority+0x32>
 80057e8:	2300      	movs	r3, #0
 80057ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80057ec:	f04f 32ff 	mov.w	r2, #4294967295
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	43da      	mvns	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	401a      	ands	r2, r3
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005800:	f04f 31ff 	mov.w	r1, #4294967295
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	fa01 f303 	lsl.w	r3, r1, r3
 800580a:	43d9      	mvns	r1, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005810:	4313      	orrs	r3, r2
         );
}
 8005812:	4618      	mov	r0, r3
 8005814:	3724      	adds	r7, #36	; 0x24
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3b01      	subs	r3, #1
 8005828:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800582c:	d301      	bcc.n	8005832 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800582e:	2301      	movs	r3, #1
 8005830:	e00f      	b.n	8005852 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005832:	4a0a      	ldr	r2, [pc, #40]	; (800585c <SysTick_Config+0x40>)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3b01      	subs	r3, #1
 8005838:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800583a:	210f      	movs	r1, #15
 800583c:	f04f 30ff 	mov.w	r0, #4294967295
 8005840:	f7ff ff90 	bl	8005764 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005844:	4b05      	ldr	r3, [pc, #20]	; (800585c <SysTick_Config+0x40>)
 8005846:	2200      	movs	r2, #0
 8005848:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800584a:	4b04      	ldr	r3, [pc, #16]	; (800585c <SysTick_Config+0x40>)
 800584c:	2207      	movs	r2, #7
 800584e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	e000e010 	.word	0xe000e010

08005860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff ff49 	bl	8005700 <__NVIC_SetPriorityGrouping>
}
 800586e:	bf00      	nop
 8005870:	3708      	adds	r7, #8
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}

08005876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005876:	b580      	push	{r7, lr}
 8005878:	b086      	sub	sp, #24
 800587a:	af00      	add	r7, sp, #0
 800587c:	4603      	mov	r3, r0
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
 8005882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005888:	f7ff ff5e 	bl	8005748 <__NVIC_GetPriorityGrouping>
 800588c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	68b9      	ldr	r1, [r7, #8]
 8005892:	6978      	ldr	r0, [r7, #20]
 8005894:	f7ff ff90 	bl	80057b8 <NVIC_EncodePriority>
 8005898:	4602      	mov	r2, r0
 800589a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800589e:	4611      	mov	r1, r2
 80058a0:	4618      	mov	r0, r3
 80058a2:	f7ff ff5f 	bl	8005764 <__NVIC_SetPriority>
}
 80058a6:	bf00      	nop
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ffb0 	bl	800581c <SysTick_Config>
 80058bc:	4603      	mov	r3, r0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b08b      	sub	sp, #44	; 0x2c
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80058d2:	2300      	movs	r3, #0
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80058d6:	2300      	movs	r3, #0
 80058d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80058da:	e169      	b.n	8005bb0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80058dc:	2201      	movs	r2, #1
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	fa02 f303 	lsl.w	r3, r2, r3
 80058e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	4013      	ands	r3, r2
 80058ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80058f0:	69ba      	ldr	r2, [r7, #24]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	f040 8158 	bne.w	8005baa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4a9a      	ldr	r2, [pc, #616]	; (8005b68 <HAL_GPIO_Init+0x2a0>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d05e      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
 8005904:	4a98      	ldr	r2, [pc, #608]	; (8005b68 <HAL_GPIO_Init+0x2a0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d875      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 800590a:	4a98      	ldr	r2, [pc, #608]	; (8005b6c <HAL_GPIO_Init+0x2a4>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d058      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
 8005910:	4a96      	ldr	r2, [pc, #600]	; (8005b6c <HAL_GPIO_Init+0x2a4>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d86f      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 8005916:	4a96      	ldr	r2, [pc, #600]	; (8005b70 <HAL_GPIO_Init+0x2a8>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d052      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
 800591c:	4a94      	ldr	r2, [pc, #592]	; (8005b70 <HAL_GPIO_Init+0x2a8>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d869      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 8005922:	4a94      	ldr	r2, [pc, #592]	; (8005b74 <HAL_GPIO_Init+0x2ac>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d04c      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
 8005928:	4a92      	ldr	r2, [pc, #584]	; (8005b74 <HAL_GPIO_Init+0x2ac>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d863      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 800592e:	4a92      	ldr	r2, [pc, #584]	; (8005b78 <HAL_GPIO_Init+0x2b0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d046      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
 8005934:	4a90      	ldr	r2, [pc, #576]	; (8005b78 <HAL_GPIO_Init+0x2b0>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d85d      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 800593a:	2b12      	cmp	r3, #18
 800593c:	d82a      	bhi.n	8005994 <HAL_GPIO_Init+0xcc>
 800593e:	2b12      	cmp	r3, #18
 8005940:	d859      	bhi.n	80059f6 <HAL_GPIO_Init+0x12e>
 8005942:	a201      	add	r2, pc, #4	; (adr r2, 8005948 <HAL_GPIO_Init+0x80>)
 8005944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005948:	080059c3 	.word	0x080059c3
 800594c:	0800599d 	.word	0x0800599d
 8005950:	080059af 	.word	0x080059af
 8005954:	080059f1 	.word	0x080059f1
 8005958:	080059f7 	.word	0x080059f7
 800595c:	080059f7 	.word	0x080059f7
 8005960:	080059f7 	.word	0x080059f7
 8005964:	080059f7 	.word	0x080059f7
 8005968:	080059f7 	.word	0x080059f7
 800596c:	080059f7 	.word	0x080059f7
 8005970:	080059f7 	.word	0x080059f7
 8005974:	080059f7 	.word	0x080059f7
 8005978:	080059f7 	.word	0x080059f7
 800597c:	080059f7 	.word	0x080059f7
 8005980:	080059f7 	.word	0x080059f7
 8005984:	080059f7 	.word	0x080059f7
 8005988:	080059f7 	.word	0x080059f7
 800598c:	080059a5 	.word	0x080059a5
 8005990:	080059b9 	.word	0x080059b9
 8005994:	4a79      	ldr	r2, [pc, #484]	; (8005b7c <HAL_GPIO_Init+0x2b4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800599a:	e02c      	b.n	80059f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	623b      	str	r3, [r7, #32]
          break;
 80059a2:	e029      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	623b      	str	r3, [r7, #32]
          break;
 80059ac:	e024      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	3308      	adds	r3, #8
 80059b4:	623b      	str	r3, [r7, #32]
          break;
 80059b6:	e01f      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	330c      	adds	r3, #12
 80059be:	623b      	str	r3, [r7, #32]
          break;
 80059c0:	e01a      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80059ca:	2304      	movs	r3, #4
 80059cc:	623b      	str	r3, [r7, #32]
          break;
 80059ce:	e013      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d105      	bne.n	80059e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059d8:	2308      	movs	r3, #8
 80059da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	611a      	str	r2, [r3, #16]
          break;
 80059e2:	e009      	b.n	80059f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80059e4:	2308      	movs	r3, #8
 80059e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	69fa      	ldr	r2, [r7, #28]
 80059ec:	615a      	str	r2, [r3, #20]
          break;
 80059ee:	e003      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80059f0:	2300      	movs	r3, #0
 80059f2:	623b      	str	r3, [r7, #32]
          break;
 80059f4:	e000      	b.n	80059f8 <HAL_GPIO_Init+0x130>
          break;
 80059f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2bff      	cmp	r3, #255	; 0xff
 80059fc:	d801      	bhi.n	8005a02 <HAL_GPIO_Init+0x13a>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	e001      	b.n	8005a06 <HAL_GPIO_Init+0x13e>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	3304      	adds	r3, #4
 8005a06:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	2bff      	cmp	r3, #255	; 0xff
 8005a0c:	d802      	bhi.n	8005a14 <HAL_GPIO_Init+0x14c>
 8005a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	e002      	b.n	8005a1a <HAL_GPIO_Init+0x152>
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	3b08      	subs	r3, #8
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	210f      	movs	r1, #15
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	401a      	ands	r2, r3
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	fa01 f303 	lsl.w	r3, r1, r3
 8005a34:	431a      	orrs	r2, r3
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f000 80b1 	beq.w	8005baa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005a48:	4b4d      	ldr	r3, [pc, #308]	; (8005b80 <HAL_GPIO_Init+0x2b8>)
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	4a4c      	ldr	r2, [pc, #304]	; (8005b80 <HAL_GPIO_Init+0x2b8>)
 8005a4e:	f043 0301 	orr.w	r3, r3, #1
 8005a52:	6193      	str	r3, [r2, #24]
 8005a54:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_GPIO_Init+0x2b8>)
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f003 0301 	and.w	r3, r3, #1
 8005a5c:	60bb      	str	r3, [r7, #8]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005a60:	4a48      	ldr	r2, [pc, #288]	; (8005b84 <HAL_GPIO_Init+0x2bc>)
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	089b      	lsrs	r3, r3, #2
 8005a66:	3302      	adds	r3, #2
 8005a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a6c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	f003 0303 	and.w	r3, r3, #3
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	220f      	movs	r2, #15
 8005a78:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7c:	43db      	mvns	r3, r3
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	4013      	ands	r3, r2
 8005a82:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a40      	ldr	r2, [pc, #256]	; (8005b88 <HAL_GPIO_Init+0x2c0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d013      	beq.n	8005ab4 <HAL_GPIO_Init+0x1ec>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <HAL_GPIO_Init+0x2c4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d00d      	beq.n	8005ab0 <HAL_GPIO_Init+0x1e8>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3e      	ldr	r2, [pc, #248]	; (8005b90 <HAL_GPIO_Init+0x2c8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d007      	beq.n	8005aac <HAL_GPIO_Init+0x1e4>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3d      	ldr	r2, [pc, #244]	; (8005b94 <HAL_GPIO_Init+0x2cc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d101      	bne.n	8005aa8 <HAL_GPIO_Init+0x1e0>
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e006      	b.n	8005ab6 <HAL_GPIO_Init+0x1ee>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	e004      	b.n	8005ab6 <HAL_GPIO_Init+0x1ee>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e002      	b.n	8005ab6 <HAL_GPIO_Init+0x1ee>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <HAL_GPIO_Init+0x1ee>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab8:	f002 0203 	and.w	r2, r2, #3
 8005abc:	0092      	lsls	r2, r2, #2
 8005abe:	4093      	lsls	r3, r2
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005ac6:	492f      	ldr	r1, [pc, #188]	; (8005b84 <HAL_GPIO_Init+0x2bc>)
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	089b      	lsrs	r3, r3, #2
 8005acc:	3302      	adds	r3, #2
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d006      	beq.n	8005aee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005ae0:	4b2d      	ldr	r3, [pc, #180]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	492c      	ldr	r1, [pc, #176]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	608b      	str	r3, [r1, #8]
 8005aec:	e006      	b.n	8005afc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005aee:	4b2a      	ldr	r3, [pc, #168]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005af0:	689a      	ldr	r2, [r3, #8]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	4928      	ldr	r1, [pc, #160]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d006      	beq.n	8005b16 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005b08:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b0a:	68da      	ldr	r2, [r3, #12]
 8005b0c:	4922      	ldr	r1, [pc, #136]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	60cb      	str	r3, [r1, #12]
 8005b14:	e006      	b.n	8005b24 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005b16:	4b20      	ldr	r3, [pc, #128]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	43db      	mvns	r3, r3
 8005b1e:	491e      	ldr	r1, [pc, #120]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d006      	beq.n	8005b3e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005b30:	4b19      	ldr	r3, [pc, #100]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b32:	685a      	ldr	r2, [r3, #4]
 8005b34:	4918      	ldr	r1, [pc, #96]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	604b      	str	r3, [r1, #4]
 8005b3c:	e006      	b.n	8005b4c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005b3e:	4b16      	ldr	r3, [pc, #88]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	43db      	mvns	r3, r3
 8005b46:	4914      	ldr	r1, [pc, #80]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d021      	beq.n	8005b9c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	490e      	ldr	r1, [pc, #56]	; (8005b98 <HAL_GPIO_Init+0x2d0>)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	600b      	str	r3, [r1, #0]
 8005b64:	e021      	b.n	8005baa <HAL_GPIO_Init+0x2e2>
 8005b66:	bf00      	nop
 8005b68:	10320000 	.word	0x10320000
 8005b6c:	10310000 	.word	0x10310000
 8005b70:	10220000 	.word	0x10220000
 8005b74:	10210000 	.word	0x10210000
 8005b78:	10120000 	.word	0x10120000
 8005b7c:	10110000 	.word	0x10110000
 8005b80:	40021000 	.word	0x40021000
 8005b84:	40010000 	.word	0x40010000
 8005b88:	40010800 	.word	0x40010800
 8005b8c:	40010c00 	.word	0x40010c00
 8005b90:	40011000 	.word	0x40011000
 8005b94:	40011400 	.word	0x40011400
 8005b98:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	43db      	mvns	r3, r3
 8005ba4:	4909      	ldr	r1, [pc, #36]	; (8005bcc <HAL_GPIO_Init+0x304>)
 8005ba6:	4013      	ands	r3, r2
 8005ba8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	3301      	adds	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f47f ae8e 	bne.w	80058dc <HAL_GPIO_Init+0x14>
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	372c      	adds	r7, #44	; 0x2c
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bc80      	pop	{r7}
 8005bca:	4770      	bx	lr
 8005bcc:	40010400 	.word	0x40010400

08005bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be0:	787b      	ldrb	r3, [r7, #1]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005be6:	887a      	ldrh	r2, [r7, #2]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005bec:	e003      	b.n	8005bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005bee:	887b      	ldrh	r3, [r7, #2]
 8005bf0:	041a      	lsls	r2, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	611a      	str	r2, [r3, #16]
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr

08005c00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b085      	sub	sp, #20
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c12:	887a      	ldrh	r2, [r7, #2]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4013      	ands	r3, r2
 8005c18:	041a      	lsls	r2, r3, #16
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	43d9      	mvns	r1, r3
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	400b      	ands	r3, r1
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	611a      	str	r2, [r3, #16]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bc80      	pop	{r7}
 8005c30:	4770      	bx	lr
	...

08005c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b086      	sub	sp, #24
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d101      	bne.n	8005c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e272      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8087 	beq.w	8005d62 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c54:	4b92      	ldr	r3, [pc, #584]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b04      	cmp	r3, #4
 8005c5e:	d00c      	beq.n	8005c7a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005c60:	4b8f      	ldr	r3, [pc, #572]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 030c 	and.w	r3, r3, #12
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d112      	bne.n	8005c92 <HAL_RCC_OscConfig+0x5e>
 8005c6c:	4b8c      	ldr	r3, [pc, #560]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c78:	d10b      	bne.n	8005c92 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c7a:	4b89      	ldr	r3, [pc, #548]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d06c      	beq.n	8005d60 <HAL_RCC_OscConfig+0x12c>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d168      	bne.n	8005d60 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e24c      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c9a:	d106      	bne.n	8005caa <HAL_RCC_OscConfig+0x76>
 8005c9c:	4b80      	ldr	r3, [pc, #512]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a7f      	ldr	r2, [pc, #508]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ca6:	6013      	str	r3, [r2, #0]
 8005ca8:	e02e      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10c      	bne.n	8005ccc <HAL_RCC_OscConfig+0x98>
 8005cb2:	4b7b      	ldr	r3, [pc, #492]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a7a      	ldr	r2, [pc, #488]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cbc:	6013      	str	r3, [r2, #0]
 8005cbe:	4b78      	ldr	r3, [pc, #480]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a77      	ldr	r2, [pc, #476]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cc8:	6013      	str	r3, [r2, #0]
 8005cca:	e01d      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0xbc>
 8005cd6:	4b72      	ldr	r3, [pc, #456]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ce0:	6013      	str	r3, [r2, #0]
 8005ce2:	4b6f      	ldr	r3, [pc, #444]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a6e      	ldr	r2, [pc, #440]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cec:	6013      	str	r3, [r2, #0]
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0xd4>
 8005cf0:	4b6b      	ldr	r3, [pc, #428]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6a      	ldr	r2, [pc, #424]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cfa:	6013      	str	r3, [r2, #0]
 8005cfc:	4b68      	ldr	r3, [pc, #416]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a67      	ldr	r2, [pc, #412]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d06:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d013      	beq.n	8005d38 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d10:	f7ff fcc8 	bl	80056a4 <HAL_GetTick>
 8005d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d16:	e008      	b.n	8005d2a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d18:	f7ff fcc4 	bl	80056a4 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	2b64      	cmp	r3, #100	; 0x64
 8005d24:	d901      	bls.n	8005d2a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005d26:	2303      	movs	r3, #3
 8005d28:	e200      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2a:	4b5d      	ldr	r3, [pc, #372]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d0f0      	beq.n	8005d18 <HAL_RCC_OscConfig+0xe4>
 8005d36:	e014      	b.n	8005d62 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d38:	f7ff fcb4 	bl	80056a4 <HAL_GetTick>
 8005d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d40:	f7ff fcb0 	bl	80056a4 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b64      	cmp	r3, #100	; 0x64
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e1ec      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d52:	4b53      	ldr	r3, [pc, #332]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1f0      	bne.n	8005d40 <HAL_RCC_OscConfig+0x10c>
 8005d5e:	e000      	b.n	8005d62 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d063      	beq.n	8005e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d6e:	4b4c      	ldr	r3, [pc, #304]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 030c 	and.w	r3, r3, #12
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005d7a:	4b49      	ldr	r3, [pc, #292]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f003 030c 	and.w	r3, r3, #12
 8005d82:	2b08      	cmp	r3, #8
 8005d84:	d11c      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x18c>
 8005d86:	4b46      	ldr	r3, [pc, #280]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d116      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d92:	4b43      	ldr	r3, [pc, #268]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_RCC_OscConfig+0x176>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d001      	beq.n	8005daa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e1c0      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005daa:	4b3d      	ldr	r3, [pc, #244]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	00db      	lsls	r3, r3, #3
 8005db8:	4939      	ldr	r1, [pc, #228]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dbe:	e03a      	b.n	8005e36 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d020      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005dc8:	4b36      	ldr	r3, [pc, #216]	; (8005ea4 <HAL_RCC_OscConfig+0x270>)
 8005dca:	2201      	movs	r2, #1
 8005dcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dce:	f7ff fc69 	bl	80056a4 <HAL_GetTick>
 8005dd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd6:	f7ff fc65 	bl	80056a4 <HAL_GetTick>
 8005dda:	4602      	mov	r2, r0
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e1a1      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d0f0      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df4:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	00db      	lsls	r3, r3, #3
 8005e02:	4927      	ldr	r1, [pc, #156]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	600b      	str	r3, [r1, #0]
 8005e08:	e015      	b.n	8005e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e0a:	4b26      	ldr	r3, [pc, #152]	; (8005ea4 <HAL_RCC_OscConfig+0x270>)
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7ff fc48 	bl	80056a4 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e18:	f7ff fc44 	bl	80056a4 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e180      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1f0      	bne.n	8005e18 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d03a      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d019      	beq.n	8005e7e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e4a:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <HAL_RCC_OscConfig+0x274>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e50:	f7ff fc28 	bl	80056a4 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e58:	f7ff fc24 	bl	80056a4 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e160      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ea0 <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d0f0      	beq.n	8005e58 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005e76:	2001      	movs	r0, #1
 8005e78:	f000 face 	bl	8006418 <RCC_Delay>
 8005e7c:	e01c      	b.n	8005eb8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ea8 <HAL_RCC_OscConfig+0x274>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e84:	f7ff fc0e 	bl	80056a4 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e8a:	e00f      	b.n	8005eac <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e8c:	f7ff fc0a 	bl	80056a4 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d908      	bls.n	8005eac <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e146      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
 8005e9e:	bf00      	nop
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	42420000 	.word	0x42420000
 8005ea8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005eac:	4b92      	ldr	r3, [pc, #584]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e9      	bne.n	8005e8c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 80a6 	beq.w	8006012 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005eca:	4b8b      	ldr	r3, [pc, #556]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ed6:	4b88      	ldr	r3, [pc, #544]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	4a87      	ldr	r2, [pc, #540]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee0:	61d3      	str	r3, [r2, #28]
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ee4:	69db      	ldr	r3, [r3, #28]
 8005ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eea:	60bb      	str	r3, [r7, #8]
 8005eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ef2:	4b82      	ldr	r3, [pc, #520]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d118      	bne.n	8005f30 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005efe:	4b7f      	ldr	r3, [pc, #508]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a7e      	ldr	r2, [pc, #504]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f0a:	f7ff fbcb 	bl	80056a4 <HAL_GetTick>
 8005f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f10:	e008      	b.n	8005f24 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f12:	f7ff fbc7 	bl	80056a4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	2b64      	cmp	r3, #100	; 0x64
 8005f1e:	d901      	bls.n	8005f24 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e103      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f24:	4b75      	ldr	r3, [pc, #468]	; (80060fc <HAL_RCC_OscConfig+0x4c8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d0f0      	beq.n	8005f12 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d106      	bne.n	8005f46 <HAL_RCC_OscConfig+0x312>
 8005f38:	4b6f      	ldr	r3, [pc, #444]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3a:	6a1b      	ldr	r3, [r3, #32]
 8005f3c:	4a6e      	ldr	r2, [pc, #440]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f3e:	f043 0301 	orr.w	r3, r3, #1
 8005f42:	6213      	str	r3, [r2, #32]
 8005f44:	e02d      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x334>
 8005f4e:	4b6a      	ldr	r3, [pc, #424]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	4a69      	ldr	r2, [pc, #420]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f54:	f023 0301 	bic.w	r3, r3, #1
 8005f58:	6213      	str	r3, [r2, #32]
 8005f5a:	4b67      	ldr	r3, [pc, #412]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	4a66      	ldr	r2, [pc, #408]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f60:	f023 0304 	bic.w	r3, r3, #4
 8005f64:	6213      	str	r3, [r2, #32]
 8005f66:	e01c      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	2b05      	cmp	r3, #5
 8005f6e:	d10c      	bne.n	8005f8a <HAL_RCC_OscConfig+0x356>
 8005f70:	4b61      	ldr	r3, [pc, #388]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4a60      	ldr	r2, [pc, #384]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f76:	f043 0304 	orr.w	r3, r3, #4
 8005f7a:	6213      	str	r3, [r2, #32]
 8005f7c:	4b5e      	ldr	r3, [pc, #376]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	4a5d      	ldr	r2, [pc, #372]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f82:	f043 0301 	orr.w	r3, r3, #1
 8005f86:	6213      	str	r3, [r2, #32]
 8005f88:	e00b      	b.n	8005fa2 <HAL_RCC_OscConfig+0x36e>
 8005f8a:	4b5b      	ldr	r3, [pc, #364]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f8c:	6a1b      	ldr	r3, [r3, #32]
 8005f8e:	4a5a      	ldr	r2, [pc, #360]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	6213      	str	r3, [r2, #32]
 8005f96:	4b58      	ldr	r3, [pc, #352]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	4a57      	ldr	r2, [pc, #348]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005f9c:	f023 0304 	bic.w	r3, r3, #4
 8005fa0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d015      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005faa:	f7ff fb7b 	bl	80056a4 <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fb0:	e00a      	b.n	8005fc8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f7ff fb77 	bl	80056a4 <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e0b1      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fc8:	4b4b      	ldr	r3, [pc, #300]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005fca:	6a1b      	ldr	r3, [r3, #32]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ee      	beq.n	8005fb2 <HAL_RCC_OscConfig+0x37e>
 8005fd4:	e014      	b.n	8006000 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005fd6:	f7ff fb65 	bl	80056a4 <HAL_GetTick>
 8005fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fdc:	e00a      	b.n	8005ff4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fde:	f7ff fb61 	bl	80056a4 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d901      	bls.n	8005ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e09b      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff4:	4b40      	ldr	r3, [pc, #256]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	f003 0302 	and.w	r3, r3, #2
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1ee      	bne.n	8005fde <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006000:	7dfb      	ldrb	r3, [r7, #23]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d105      	bne.n	8006012 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006006:	4b3c      	ldr	r3, [pc, #240]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4a3b      	ldr	r2, [pc, #236]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800600c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006010:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 8087 	beq.w	800612a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800601c:	4b36      	ldr	r3, [pc, #216]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b08      	cmp	r3, #8
 8006026:	d061      	beq.n	80060ec <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d146      	bne.n	80060be <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006030:	4b33      	ldr	r3, [pc, #204]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 8006032:	2200      	movs	r2, #0
 8006034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006036:	f7ff fb35 	bl	80056a4 <HAL_GetTick>
 800603a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800603c:	e008      	b.n	8006050 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800603e:	f7ff fb31 	bl	80056a4 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	2b02      	cmp	r3, #2
 800604a:	d901      	bls.n	8006050 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800604c:	2303      	movs	r3, #3
 800604e:	e06d      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006050:	4b29      	ldr	r3, [pc, #164]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1f0      	bne.n	800603e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006064:	d108      	bne.n	8006078 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006066:	4b24      	ldr	r3, [pc, #144]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	4921      	ldr	r1, [pc, #132]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 8006074:	4313      	orrs	r3, r2
 8006076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006078:	4b1f      	ldr	r3, [pc, #124]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a19      	ldr	r1, [r3, #32]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	430b      	orrs	r3, r1
 800608a:	491b      	ldr	r1, [pc, #108]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 800608c:	4313      	orrs	r3, r2
 800608e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006090:	4b1b      	ldr	r3, [pc, #108]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 8006092:	2201      	movs	r2, #1
 8006094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006096:	f7ff fb05 	bl	80056a4 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800609c:	e008      	b.n	80060b0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800609e:	f7ff fb01 	bl	80056a4 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d901      	bls.n	80060b0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80060ac:	2303      	movs	r3, #3
 80060ae:	e03d      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80060b0:	4b11      	ldr	r3, [pc, #68]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d0f0      	beq.n	800609e <HAL_RCC_OscConfig+0x46a>
 80060bc:	e035      	b.n	800612a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060be:	4b10      	ldr	r3, [pc, #64]	; (8006100 <HAL_RCC_OscConfig+0x4cc>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7ff faee 	bl	80056a4 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060cc:	f7ff faea 	bl	80056a4 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e026      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060de:	4b06      	ldr	r3, [pc, #24]	; (80060f8 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1f0      	bne.n	80060cc <HAL_RCC_OscConfig+0x498>
 80060ea:	e01e      	b.n	800612a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e019      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
 80060f8:	40021000 	.word	0x40021000
 80060fc:	40007000 	.word	0x40007000
 8006100:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <HAL_RCC_OscConfig+0x500>)
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	429a      	cmp	r2, r3
 8006116:	d106      	bne.n	8006126 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d001      	beq.n	800612a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	e000      	b.n	800612c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}
 8006134:	40021000 	.word	0x40021000

08006138 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e0d0      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800614c:	4b6a      	ldr	r3, [pc, #424]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0307 	and.w	r3, r3, #7
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d910      	bls.n	800617c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800615a:	4b67      	ldr	r3, [pc, #412]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f023 0207 	bic.w	r2, r3, #7
 8006162:	4965      	ldr	r1, [pc, #404]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	4313      	orrs	r3, r2
 8006168:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800616a:	4b63      	ldr	r3, [pc, #396]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d001      	beq.n	800617c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e0b8      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d020      	beq.n	80061ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006194:	4b59      	ldr	r3, [pc, #356]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	4a58      	ldr	r2, [pc, #352]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 800619a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800619e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061ac:	4b53      	ldr	r3, [pc, #332]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	4a52      	ldr	r2, [pc, #328]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80061b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b8:	4b50      	ldr	r3, [pc, #320]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	494d      	ldr	r1, [pc, #308]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0301 	and.w	r3, r3, #1
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d040      	beq.n	8006258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d107      	bne.n	80061ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d115      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e07f      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	2b02      	cmp	r3, #2
 80061f4:	d107      	bne.n	8006206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061f6:	4b41      	ldr	r3, [pc, #260]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d109      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e073      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006206:	4b3d      	ldr	r3, [pc, #244]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e06b      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006216:	4b39      	ldr	r3, [pc, #228]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f023 0203 	bic.w	r2, r3, #3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	4936      	ldr	r1, [pc, #216]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006224:	4313      	orrs	r3, r2
 8006226:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006228:	f7ff fa3c 	bl	80056a4 <HAL_GetTick>
 800622c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800622e:	e00a      	b.n	8006246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006230:	f7ff fa38 	bl	80056a4 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	f241 3288 	movw	r2, #5000	; 0x1388
 800623e:	4293      	cmp	r3, r2
 8006240:	d901      	bls.n	8006246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e053      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006246:	4b2d      	ldr	r3, [pc, #180]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f003 020c 	and.w	r2, r3, #12
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	429a      	cmp	r2, r3
 8006256:	d1eb      	bne.n	8006230 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006258:	4b27      	ldr	r3, [pc, #156]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d210      	bcs.n	8006288 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006266:	4b24      	ldr	r3, [pc, #144]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f023 0207 	bic.w	r2, r3, #7
 800626e:	4922      	ldr	r1, [pc, #136]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	4313      	orrs	r3, r2
 8006274:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006276:	4b20      	ldr	r3, [pc, #128]	; (80062f8 <HAL_RCC_ClockConfig+0x1c0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	429a      	cmp	r2, r3
 8006282:	d001      	beq.n	8006288 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e032      	b.n	80062ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d008      	beq.n	80062a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006294:	4b19      	ldr	r3, [pc, #100]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	4916      	ldr	r1, [pc, #88]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	4313      	orrs	r3, r2
 80062a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80062b2:	4b12      	ldr	r3, [pc, #72]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	691b      	ldr	r3, [r3, #16]
 80062be:	00db      	lsls	r3, r3, #3
 80062c0:	490e      	ldr	r1, [pc, #56]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80062c6:	f000 f821 	bl	800630c <HAL_RCC_GetSysClockFreq>
 80062ca:	4602      	mov	r2, r0
 80062cc:	4b0b      	ldr	r3, [pc, #44]	; (80062fc <HAL_RCC_ClockConfig+0x1c4>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	091b      	lsrs	r3, r3, #4
 80062d2:	f003 030f 	and.w	r3, r3, #15
 80062d6:	490a      	ldr	r1, [pc, #40]	; (8006300 <HAL_RCC_ClockConfig+0x1c8>)
 80062d8:	5ccb      	ldrb	r3, [r1, r3]
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	4a09      	ldr	r2, [pc, #36]	; (8006304 <HAL_RCC_ClockConfig+0x1cc>)
 80062e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80062e2:	4b09      	ldr	r3, [pc, #36]	; (8006308 <HAL_RCC_ClockConfig+0x1d0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7ff f99a 	bl	8005620 <HAL_InitTick>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}
 80062f6:	bf00      	nop
 80062f8:	40022000 	.word	0x40022000
 80062fc:	40021000 	.word	0x40021000
 8006300:	080077b8 	.word	0x080077b8
 8006304:	20000000 	.word	0x20000000
 8006308:	20000004 	.word	0x20000004

0800630c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
 8006316:	2300      	movs	r3, #0
 8006318:	60bb      	str	r3, [r7, #8]
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]
 800631e:	2300      	movs	r3, #0
 8006320:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006326:	4b1e      	ldr	r3, [pc, #120]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 030c 	and.w	r3, r3, #12
 8006332:	2b04      	cmp	r3, #4
 8006334:	d002      	beq.n	800633c <HAL_RCC_GetSysClockFreq+0x30>
 8006336:	2b08      	cmp	r3, #8
 8006338:	d003      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x36>
 800633a:	e027      	b.n	800638c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800633e:	613b      	str	r3, [r7, #16]
      break;
 8006340:	e027      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	0c9b      	lsrs	r3, r3, #18
 8006346:	f003 030f 	and.w	r3, r3, #15
 800634a:	4a17      	ldr	r2, [pc, #92]	; (80063a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800634c:	5cd3      	ldrb	r3, [r2, r3]
 800634e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d010      	beq.n	800637c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800635a:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	0c5b      	lsrs	r3, r3, #17
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	4a11      	ldr	r2, [pc, #68]	; (80063ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8006366:	5cd3      	ldrb	r3, [r2, r3]
 8006368:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a0d      	ldr	r2, [pc, #52]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800636e:	fb03 f202 	mul.w	r2, r3, r2
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	fbb2 f3f3 	udiv	r3, r2, r3
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e004      	b.n	8006386 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a0c      	ldr	r2, [pc, #48]	; (80063b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006380:	fb02 f303 	mul.w	r3, r2, r3
 8006384:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	613b      	str	r3, [r7, #16]
      break;
 800638a:	e002      	b.n	8006392 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800638e:	613b      	str	r3, [r7, #16]
      break;
 8006390:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006392:	693b      	ldr	r3, [r7, #16]
}
 8006394:	4618      	mov	r0, r3
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	bc80      	pop	{r7}
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40021000 	.word	0x40021000
 80063a4:	007a1200 	.word	0x007a1200
 80063a8:	080077d0 	.word	0x080077d0
 80063ac:	080077e0 	.word	0x080077e0
 80063b0:	003d0900 	.word	0x003d0900

080063b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80063b4:	b480      	push	{r7}
 80063b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80063b8:	4b02      	ldr	r3, [pc, #8]	; (80063c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80063ba:	681b      	ldr	r3, [r3, #0]
}
 80063bc:	4618      	mov	r0, r3
 80063be:	46bd      	mov	sp, r7
 80063c0:	bc80      	pop	{r7}
 80063c2:	4770      	bx	lr
 80063c4:	20000000 	.word	0x20000000

080063c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063cc:	f7ff fff2 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063d0:	4602      	mov	r2, r0
 80063d2:	4b05      	ldr	r3, [pc, #20]	; (80063e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	0a1b      	lsrs	r3, r3, #8
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	4903      	ldr	r1, [pc, #12]	; (80063ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80063de:	5ccb      	ldrb	r3, [r1, r3]
 80063e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	40021000 	.word	0x40021000
 80063ec:	080077c8 	.word	0x080077c8

080063f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80063f4:	f7ff ffde 	bl	80063b4 <HAL_RCC_GetHCLKFreq>
 80063f8:	4602      	mov	r2, r0
 80063fa:	4b05      	ldr	r3, [pc, #20]	; (8006410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	0adb      	lsrs	r3, r3, #11
 8006400:	f003 0307 	and.w	r3, r3, #7
 8006404:	4903      	ldr	r1, [pc, #12]	; (8006414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006406:	5ccb      	ldrb	r3, [r1, r3]
 8006408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800640c:	4618      	mov	r0, r3
 800640e:	bd80      	pop	{r7, pc}
 8006410:	40021000 	.word	0x40021000
 8006414:	080077c8 	.word	0x080077c8

08006418 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <RCC_Delay+0x34>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <RCC_Delay+0x38>)
 8006426:	fba2 2303 	umull	r2, r3, r2, r3
 800642a:	0a5b      	lsrs	r3, r3, #9
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	fb02 f303 	mul.w	r3, r2, r3
 8006432:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006434:	bf00      	nop
  }
  while (Delay --);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	1e5a      	subs	r2, r3, #1
 800643a:	60fa      	str	r2, [r7, #12]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1f9      	bne.n	8006434 <RCC_Delay+0x1c>
}
 8006440:	bf00      	nop
 8006442:	bf00      	nop
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	bc80      	pop	{r7}
 800644a:	4770      	bx	lr
 800644c:	20000000 	.word	0x20000000
 8006450:	10624dd3 	.word	0x10624dd3

08006454 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e042      	b.n	80064ec <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f7fe ff74 	bl	8005368 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2224      	movs	r2, #36	; 0x24
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68da      	ldr	r2, [r3, #12]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006496:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f91d 	bl	80066d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	695a      	ldr	r2, [r3, #20]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68da      	ldr	r2, [r3, #12]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b08a      	sub	sp, #40	; 0x28
 80064f8:	af02      	add	r7, sp, #8
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	603b      	str	r3, [r7, #0]
 8006500:	4613      	mov	r3, r2
 8006502:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800650e:	b2db      	uxtb	r3, r3
 8006510:	2b20      	cmp	r3, #32
 8006512:	d16d      	bne.n	80065f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_UART_Transmit+0x2c>
 800651a:	88fb      	ldrh	r3, [r7, #6]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d101      	bne.n	8006524 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	e066      	b.n	80065f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2221      	movs	r2, #33	; 0x21
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006532:	f7ff f8b7 	bl	80056a4 <HAL_GetTick>
 8006536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	88fa      	ldrh	r2, [r7, #6]
 800653c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	88fa      	ldrh	r2, [r7, #6]
 8006542:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800654c:	d108      	bne.n	8006560 <HAL_UART_Transmit+0x6c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006556:	2300      	movs	r3, #0
 8006558:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	e003      	b.n	8006568 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006564:	2300      	movs	r3, #0
 8006566:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006568:	e02a      	b.n	80065c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2200      	movs	r2, #0
 8006572:	2180      	movs	r1, #128	; 0x80
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f840 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006580:	2303      	movs	r3, #3
 8006582:	e036      	b.n	80065f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10b      	bne.n	80065a2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	881b      	ldrh	r3, [r3, #0]
 800658e:	461a      	mov	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006598:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800659a:	69bb      	ldr	r3, [r7, #24]
 800659c:	3302      	adds	r3, #2
 800659e:	61bb      	str	r3, [r7, #24]
 80065a0:	e007      	b.n	80065b2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	781a      	ldrb	r2, [r3, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	3b01      	subs	r3, #1
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1cf      	bne.n	800656a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	2140      	movs	r1, #64	; 0x40
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f810 	bl	80065fa <UART_WaitOnFlagUntilTimeout>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e006      	b.n	80065f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2220      	movs	r2, #32
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	e000      	b.n	80065f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80065f0:	2302      	movs	r3, #2
  }
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3720      	adds	r7, #32
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b090      	sub	sp, #64	; 0x40
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	603b      	str	r3, [r7, #0]
 8006606:	4613      	mov	r3, r2
 8006608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	e050      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800660c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800660e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006612:	d04c      	beq.n	80066ae <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006616:	2b00      	cmp	r3, #0
 8006618:	d007      	beq.n	800662a <UART_WaitOnFlagUntilTimeout+0x30>
 800661a:	f7ff f843 	bl	80056a4 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006626:	429a      	cmp	r2, r3
 8006628:	d241      	bcs.n	80066ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	330c      	adds	r3, #12
 8006648:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800664a:	637a      	str	r2, [r7, #52]	; 0x34
 800664c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006650:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006652:	e841 2300 	strex	r3, r2, [r1]
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1e5      	bne.n	800662a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	3314      	adds	r3, #20
 8006664:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	e853 3f00 	ldrex	r3, [r3]
 800666c:	613b      	str	r3, [r7, #16]
   return(result);
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	f023 0301 	bic.w	r3, r3, #1
 8006674:	63bb      	str	r3, [r7, #56]	; 0x38
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	3314      	adds	r3, #20
 800667c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800667e:	623a      	str	r2, [r7, #32]
 8006680:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006682:	69f9      	ldr	r1, [r7, #28]
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	e841 2300 	strex	r3, r2, [r1]
 800668a:	61bb      	str	r3, [r7, #24]
   return(result);
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1e5      	bne.n	800665e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2220      	movs	r2, #32
 8006696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2220      	movs	r2, #32
 800669e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e00f      	b.n	80066ce <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	bf0c      	ite	eq
 80066be:	2301      	moveq	r3, #1
 80066c0:	2300      	movne	r3, #0
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	461a      	mov	r2, r3
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d09f      	beq.n	800660c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3740      	adds	r7, #64	; 0x40
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
	...

080066d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	695b      	ldr	r3, [r3, #20]
 8006704:	4313      	orrs	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006712:	f023 030c 	bic.w	r3, r3, #12
 8006716:	687a      	ldr	r2, [r7, #4]
 8006718:	6812      	ldr	r2, [r2, #0]
 800671a:	68b9      	ldr	r1, [r7, #8]
 800671c:	430b      	orrs	r3, r1
 800671e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4a2c      	ldr	r2, [pc, #176]	; (80067ec <UART_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d103      	bne.n	8006748 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7ff fe56 	bl	80063f0 <HAL_RCC_GetPCLK2Freq>
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	e002      	b.n	800674e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006748:	f7ff fe3e 	bl	80063c8 <HAL_RCC_GetPCLK1Freq>
 800674c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	4613      	mov	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	4413      	add	r3, r2
 8006756:	009a      	lsls	r2, r3, #2
 8006758:	441a      	add	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	009b      	lsls	r3, r3, #2
 8006760:	fbb2 f3f3 	udiv	r3, r2, r3
 8006764:	4a22      	ldr	r2, [pc, #136]	; (80067f0 <UART_SetConfig+0x118>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	0119      	lsls	r1, r3, #4
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009a      	lsls	r2, r3, #2
 8006778:	441a      	add	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	fbb2 f2f3 	udiv	r2, r2, r3
 8006784:	4b1a      	ldr	r3, [pc, #104]	; (80067f0 <UART_SetConfig+0x118>)
 8006786:	fba3 0302 	umull	r0, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	2064      	movs	r0, #100	; 0x64
 800678e:	fb00 f303 	mul.w	r3, r0, r3
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	011b      	lsls	r3, r3, #4
 8006796:	3332      	adds	r3, #50	; 0x32
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <UART_SetConfig+0x118>)
 800679a:	fba2 2303 	umull	r2, r3, r2, r3
 800679e:	095b      	lsrs	r3, r3, #5
 80067a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067a4:	4419      	add	r1, r3
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	009a      	lsls	r2, r3, #2
 80067b0:	441a      	add	r2, r3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <UART_SetConfig+0x118>)
 80067be:	fba3 0302 	umull	r0, r3, r3, r2
 80067c2:	095b      	lsrs	r3, r3, #5
 80067c4:	2064      	movs	r0, #100	; 0x64
 80067c6:	fb00 f303 	mul.w	r3, r0, r3
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	011b      	lsls	r3, r3, #4
 80067ce:	3332      	adds	r3, #50	; 0x32
 80067d0:	4a07      	ldr	r2, [pc, #28]	; (80067f0 <UART_SetConfig+0x118>)
 80067d2:	fba2 2303 	umull	r2, r3, r2, r3
 80067d6:	095b      	lsrs	r3, r3, #5
 80067d8:	f003 020f 	and.w	r2, r3, #15
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	440a      	add	r2, r1
 80067e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	40013800 	.word	0x40013800
 80067f0:	51eb851f 	.word	0x51eb851f

080067f4 <__errno>:
 80067f4:	4b01      	ldr	r3, [pc, #4]	; (80067fc <__errno+0x8>)
 80067f6:	6818      	ldr	r0, [r3, #0]
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	2000000c 	.word	0x2000000c

08006800 <__libc_init_array>:
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	2600      	movs	r6, #0
 8006804:	4d0c      	ldr	r5, [pc, #48]	; (8006838 <__libc_init_array+0x38>)
 8006806:	4c0d      	ldr	r4, [pc, #52]	; (800683c <__libc_init_array+0x3c>)
 8006808:	1b64      	subs	r4, r4, r5
 800680a:	10a4      	asrs	r4, r4, #2
 800680c:	42a6      	cmp	r6, r4
 800680e:	d109      	bne.n	8006824 <__libc_init_array+0x24>
 8006810:	f000 ffb6 	bl	8007780 <_init>
 8006814:	2600      	movs	r6, #0
 8006816:	4d0a      	ldr	r5, [pc, #40]	; (8006840 <__libc_init_array+0x40>)
 8006818:	4c0a      	ldr	r4, [pc, #40]	; (8006844 <__libc_init_array+0x44>)
 800681a:	1b64      	subs	r4, r4, r5
 800681c:	10a4      	asrs	r4, r4, #2
 800681e:	42a6      	cmp	r6, r4
 8006820:	d105      	bne.n	800682e <__libc_init_array+0x2e>
 8006822:	bd70      	pop	{r4, r5, r6, pc}
 8006824:	f855 3b04 	ldr.w	r3, [r5], #4
 8006828:	4798      	blx	r3
 800682a:	3601      	adds	r6, #1
 800682c:	e7ee      	b.n	800680c <__libc_init_array+0xc>
 800682e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006832:	4798      	blx	r3
 8006834:	3601      	adds	r6, #1
 8006836:	e7f2      	b.n	800681e <__libc_init_array+0x1e>
 8006838:	0800787c 	.word	0x0800787c
 800683c:	0800787c 	.word	0x0800787c
 8006840:	0800787c 	.word	0x0800787c
 8006844:	08007880 	.word	0x08007880

08006848 <memset>:
 8006848:	4603      	mov	r3, r0
 800684a:	4402      	add	r2, r0
 800684c:	4293      	cmp	r3, r2
 800684e:	d100      	bne.n	8006852 <memset+0xa>
 8006850:	4770      	bx	lr
 8006852:	f803 1b01 	strb.w	r1, [r3], #1
 8006856:	e7f9      	b.n	800684c <memset+0x4>

08006858 <iprintf>:
 8006858:	b40f      	push	{r0, r1, r2, r3}
 800685a:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <iprintf+0x2c>)
 800685c:	b513      	push	{r0, r1, r4, lr}
 800685e:	681c      	ldr	r4, [r3, #0]
 8006860:	b124      	cbz	r4, 800686c <iprintf+0x14>
 8006862:	69a3      	ldr	r3, [r4, #24]
 8006864:	b913      	cbnz	r3, 800686c <iprintf+0x14>
 8006866:	4620      	mov	r0, r4
 8006868:	f000 f866 	bl	8006938 <__sinit>
 800686c:	ab05      	add	r3, sp, #20
 800686e:	4620      	mov	r0, r4
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	68a1      	ldr	r1, [r4, #8]
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	f000 f9bb 	bl	8006bf0 <_vfiprintf_r>
 800687a:	b002      	add	sp, #8
 800687c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006880:	b004      	add	sp, #16
 8006882:	4770      	bx	lr
 8006884:	2000000c 	.word	0x2000000c

08006888 <std>:
 8006888:	2300      	movs	r3, #0
 800688a:	b510      	push	{r4, lr}
 800688c:	4604      	mov	r4, r0
 800688e:	e9c0 3300 	strd	r3, r3, [r0]
 8006892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006896:	6083      	str	r3, [r0, #8]
 8006898:	8181      	strh	r1, [r0, #12]
 800689a:	6643      	str	r3, [r0, #100]	; 0x64
 800689c:	81c2      	strh	r2, [r0, #14]
 800689e:	6183      	str	r3, [r0, #24]
 80068a0:	4619      	mov	r1, r3
 80068a2:	2208      	movs	r2, #8
 80068a4:	305c      	adds	r0, #92	; 0x5c
 80068a6:	f7ff ffcf 	bl	8006848 <memset>
 80068aa:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <std+0x38>)
 80068ac:	6224      	str	r4, [r4, #32]
 80068ae:	6263      	str	r3, [r4, #36]	; 0x24
 80068b0:	4b04      	ldr	r3, [pc, #16]	; (80068c4 <std+0x3c>)
 80068b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80068b4:	4b04      	ldr	r3, [pc, #16]	; (80068c8 <std+0x40>)
 80068b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068b8:	4b04      	ldr	r3, [pc, #16]	; (80068cc <std+0x44>)
 80068ba:	6323      	str	r3, [r4, #48]	; 0x30
 80068bc:	bd10      	pop	{r4, pc}
 80068be:	bf00      	nop
 80068c0:	0800719d 	.word	0x0800719d
 80068c4:	080071bf 	.word	0x080071bf
 80068c8:	080071f7 	.word	0x080071f7
 80068cc:	0800721b 	.word	0x0800721b

080068d0 <_cleanup_r>:
 80068d0:	4901      	ldr	r1, [pc, #4]	; (80068d8 <_cleanup_r+0x8>)
 80068d2:	f000 b8af 	b.w	8006a34 <_fwalk_reent>
 80068d6:	bf00      	nop
 80068d8:	080074ed 	.word	0x080074ed

080068dc <__sfmoreglue>:
 80068dc:	2268      	movs	r2, #104	; 0x68
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	1e4d      	subs	r5, r1, #1
 80068e2:	4355      	muls	r5, r2
 80068e4:	460e      	mov	r6, r1
 80068e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068ea:	f000 f8e5 	bl	8006ab8 <_malloc_r>
 80068ee:	4604      	mov	r4, r0
 80068f0:	b140      	cbz	r0, 8006904 <__sfmoreglue+0x28>
 80068f2:	2100      	movs	r1, #0
 80068f4:	e9c0 1600 	strd	r1, r6, [r0]
 80068f8:	300c      	adds	r0, #12
 80068fa:	60a0      	str	r0, [r4, #8]
 80068fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006900:	f7ff ffa2 	bl	8006848 <memset>
 8006904:	4620      	mov	r0, r4
 8006906:	bd70      	pop	{r4, r5, r6, pc}

08006908 <__sfp_lock_acquire>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__sfp_lock_acquire+0x8>)
 800690a:	f000 b8b3 	b.w	8006a74 <__retarget_lock_acquire_recursive>
 800690e:	bf00      	nop
 8006910:	200000dd 	.word	0x200000dd

08006914 <__sfp_lock_release>:
 8006914:	4801      	ldr	r0, [pc, #4]	; (800691c <__sfp_lock_release+0x8>)
 8006916:	f000 b8ae 	b.w	8006a76 <__retarget_lock_release_recursive>
 800691a:	bf00      	nop
 800691c:	200000dd 	.word	0x200000dd

08006920 <__sinit_lock_acquire>:
 8006920:	4801      	ldr	r0, [pc, #4]	; (8006928 <__sinit_lock_acquire+0x8>)
 8006922:	f000 b8a7 	b.w	8006a74 <__retarget_lock_acquire_recursive>
 8006926:	bf00      	nop
 8006928:	200000de 	.word	0x200000de

0800692c <__sinit_lock_release>:
 800692c:	4801      	ldr	r0, [pc, #4]	; (8006934 <__sinit_lock_release+0x8>)
 800692e:	f000 b8a2 	b.w	8006a76 <__retarget_lock_release_recursive>
 8006932:	bf00      	nop
 8006934:	200000de 	.word	0x200000de

08006938 <__sinit>:
 8006938:	b510      	push	{r4, lr}
 800693a:	4604      	mov	r4, r0
 800693c:	f7ff fff0 	bl	8006920 <__sinit_lock_acquire>
 8006940:	69a3      	ldr	r3, [r4, #24]
 8006942:	b11b      	cbz	r3, 800694c <__sinit+0x14>
 8006944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006948:	f7ff bff0 	b.w	800692c <__sinit_lock_release>
 800694c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006950:	6523      	str	r3, [r4, #80]	; 0x50
 8006952:	4b13      	ldr	r3, [pc, #76]	; (80069a0 <__sinit+0x68>)
 8006954:	4a13      	ldr	r2, [pc, #76]	; (80069a4 <__sinit+0x6c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	62a2      	str	r2, [r4, #40]	; 0x28
 800695a:	42a3      	cmp	r3, r4
 800695c:	bf08      	it	eq
 800695e:	2301      	moveq	r3, #1
 8006960:	4620      	mov	r0, r4
 8006962:	bf08      	it	eq
 8006964:	61a3      	streq	r3, [r4, #24]
 8006966:	f000 f81f 	bl	80069a8 <__sfp>
 800696a:	6060      	str	r0, [r4, #4]
 800696c:	4620      	mov	r0, r4
 800696e:	f000 f81b 	bl	80069a8 <__sfp>
 8006972:	60a0      	str	r0, [r4, #8]
 8006974:	4620      	mov	r0, r4
 8006976:	f000 f817 	bl	80069a8 <__sfp>
 800697a:	2200      	movs	r2, #0
 800697c:	2104      	movs	r1, #4
 800697e:	60e0      	str	r0, [r4, #12]
 8006980:	6860      	ldr	r0, [r4, #4]
 8006982:	f7ff ff81 	bl	8006888 <std>
 8006986:	2201      	movs	r2, #1
 8006988:	2109      	movs	r1, #9
 800698a:	68a0      	ldr	r0, [r4, #8]
 800698c:	f7ff ff7c 	bl	8006888 <std>
 8006990:	2202      	movs	r2, #2
 8006992:	2112      	movs	r1, #18
 8006994:	68e0      	ldr	r0, [r4, #12]
 8006996:	f7ff ff77 	bl	8006888 <std>
 800699a:	2301      	movs	r3, #1
 800699c:	61a3      	str	r3, [r4, #24]
 800699e:	e7d1      	b.n	8006944 <__sinit+0xc>
 80069a0:	080077e4 	.word	0x080077e4
 80069a4:	080068d1 	.word	0x080068d1

080069a8 <__sfp>:
 80069a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069aa:	4607      	mov	r7, r0
 80069ac:	f7ff ffac 	bl	8006908 <__sfp_lock_acquire>
 80069b0:	4b1e      	ldr	r3, [pc, #120]	; (8006a2c <__sfp+0x84>)
 80069b2:	681e      	ldr	r6, [r3, #0]
 80069b4:	69b3      	ldr	r3, [r6, #24]
 80069b6:	b913      	cbnz	r3, 80069be <__sfp+0x16>
 80069b8:	4630      	mov	r0, r6
 80069ba:	f7ff ffbd 	bl	8006938 <__sinit>
 80069be:	3648      	adds	r6, #72	; 0x48
 80069c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	d503      	bpl.n	80069d0 <__sfp+0x28>
 80069c8:	6833      	ldr	r3, [r6, #0]
 80069ca:	b30b      	cbz	r3, 8006a10 <__sfp+0x68>
 80069cc:	6836      	ldr	r6, [r6, #0]
 80069ce:	e7f7      	b.n	80069c0 <__sfp+0x18>
 80069d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069d4:	b9d5      	cbnz	r5, 8006a0c <__sfp+0x64>
 80069d6:	4b16      	ldr	r3, [pc, #88]	; (8006a30 <__sfp+0x88>)
 80069d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069dc:	60e3      	str	r3, [r4, #12]
 80069de:	6665      	str	r5, [r4, #100]	; 0x64
 80069e0:	f000 f847 	bl	8006a72 <__retarget_lock_init_recursive>
 80069e4:	f7ff ff96 	bl	8006914 <__sfp_lock_release>
 80069e8:	2208      	movs	r2, #8
 80069ea:	4629      	mov	r1, r5
 80069ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069f4:	6025      	str	r5, [r4, #0]
 80069f6:	61a5      	str	r5, [r4, #24]
 80069f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069fc:	f7ff ff24 	bl	8006848 <memset>
 8006a00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a0c:	3468      	adds	r4, #104	; 0x68
 8006a0e:	e7d9      	b.n	80069c4 <__sfp+0x1c>
 8006a10:	2104      	movs	r1, #4
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff ff62 	bl	80068dc <__sfmoreglue>
 8006a18:	4604      	mov	r4, r0
 8006a1a:	6030      	str	r0, [r6, #0]
 8006a1c:	2800      	cmp	r0, #0
 8006a1e:	d1d5      	bne.n	80069cc <__sfp+0x24>
 8006a20:	f7ff ff78 	bl	8006914 <__sfp_lock_release>
 8006a24:	230c      	movs	r3, #12
 8006a26:	603b      	str	r3, [r7, #0]
 8006a28:	e7ee      	b.n	8006a08 <__sfp+0x60>
 8006a2a:	bf00      	nop
 8006a2c:	080077e4 	.word	0x080077e4
 8006a30:	ffff0001 	.word	0xffff0001

08006a34 <_fwalk_reent>:
 8006a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a38:	4606      	mov	r6, r0
 8006a3a:	4688      	mov	r8, r1
 8006a3c:	2700      	movs	r7, #0
 8006a3e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a46:	f1b9 0901 	subs.w	r9, r9, #1
 8006a4a:	d505      	bpl.n	8006a58 <_fwalk_reent+0x24>
 8006a4c:	6824      	ldr	r4, [r4, #0]
 8006a4e:	2c00      	cmp	r4, #0
 8006a50:	d1f7      	bne.n	8006a42 <_fwalk_reent+0xe>
 8006a52:	4638      	mov	r0, r7
 8006a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a58:	89ab      	ldrh	r3, [r5, #12]
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d907      	bls.n	8006a6e <_fwalk_reent+0x3a>
 8006a5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a62:	3301      	adds	r3, #1
 8006a64:	d003      	beq.n	8006a6e <_fwalk_reent+0x3a>
 8006a66:	4629      	mov	r1, r5
 8006a68:	4630      	mov	r0, r6
 8006a6a:	47c0      	blx	r8
 8006a6c:	4307      	orrs	r7, r0
 8006a6e:	3568      	adds	r5, #104	; 0x68
 8006a70:	e7e9      	b.n	8006a46 <_fwalk_reent+0x12>

08006a72 <__retarget_lock_init_recursive>:
 8006a72:	4770      	bx	lr

08006a74 <__retarget_lock_acquire_recursive>:
 8006a74:	4770      	bx	lr

08006a76 <__retarget_lock_release_recursive>:
 8006a76:	4770      	bx	lr

08006a78 <sbrk_aligned>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	4e0e      	ldr	r6, [pc, #56]	; (8006ab4 <sbrk_aligned+0x3c>)
 8006a7c:	460c      	mov	r4, r1
 8006a7e:	6831      	ldr	r1, [r6, #0]
 8006a80:	4605      	mov	r5, r0
 8006a82:	b911      	cbnz	r1, 8006a8a <sbrk_aligned+0x12>
 8006a84:	f000 fb7a 	bl	800717c <_sbrk_r>
 8006a88:	6030      	str	r0, [r6, #0]
 8006a8a:	4621      	mov	r1, r4
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f000 fb75 	bl	800717c <_sbrk_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	d00a      	beq.n	8006aac <sbrk_aligned+0x34>
 8006a96:	1cc4      	adds	r4, r0, #3
 8006a98:	f024 0403 	bic.w	r4, r4, #3
 8006a9c:	42a0      	cmp	r0, r4
 8006a9e:	d007      	beq.n	8006ab0 <sbrk_aligned+0x38>
 8006aa0:	1a21      	subs	r1, r4, r0
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	f000 fb6a 	bl	800717c <_sbrk_r>
 8006aa8:	3001      	adds	r0, #1
 8006aaa:	d101      	bne.n	8006ab0 <sbrk_aligned+0x38>
 8006aac:	f04f 34ff 	mov.w	r4, #4294967295
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	200000e4 	.word	0x200000e4

08006ab8 <_malloc_r>:
 8006ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006abc:	1ccd      	adds	r5, r1, #3
 8006abe:	f025 0503 	bic.w	r5, r5, #3
 8006ac2:	3508      	adds	r5, #8
 8006ac4:	2d0c      	cmp	r5, #12
 8006ac6:	bf38      	it	cc
 8006ac8:	250c      	movcc	r5, #12
 8006aca:	2d00      	cmp	r5, #0
 8006acc:	4607      	mov	r7, r0
 8006ace:	db01      	blt.n	8006ad4 <_malloc_r+0x1c>
 8006ad0:	42a9      	cmp	r1, r5
 8006ad2:	d905      	bls.n	8006ae0 <_malloc_r+0x28>
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	603b      	str	r3, [r7, #0]
 8006ada:	4630      	mov	r0, r6
 8006adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ae0:	4e2e      	ldr	r6, [pc, #184]	; (8006b9c <_malloc_r+0xe4>)
 8006ae2:	f000 fdc5 	bl	8007670 <__malloc_lock>
 8006ae6:	6833      	ldr	r3, [r6, #0]
 8006ae8:	461c      	mov	r4, r3
 8006aea:	bb34      	cbnz	r4, 8006b3a <_malloc_r+0x82>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4638      	mov	r0, r7
 8006af0:	f7ff ffc2 	bl	8006a78 <sbrk_aligned>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	4604      	mov	r4, r0
 8006af8:	d14d      	bne.n	8006b96 <_malloc_r+0xde>
 8006afa:	6834      	ldr	r4, [r6, #0]
 8006afc:	4626      	mov	r6, r4
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	d140      	bne.n	8006b84 <_malloc_r+0xcc>
 8006b02:	6823      	ldr	r3, [r4, #0]
 8006b04:	4631      	mov	r1, r6
 8006b06:	4638      	mov	r0, r7
 8006b08:	eb04 0803 	add.w	r8, r4, r3
 8006b0c:	f000 fb36 	bl	800717c <_sbrk_r>
 8006b10:	4580      	cmp	r8, r0
 8006b12:	d13a      	bne.n	8006b8a <_malloc_r+0xd2>
 8006b14:	6821      	ldr	r1, [r4, #0]
 8006b16:	3503      	adds	r5, #3
 8006b18:	1a6d      	subs	r5, r5, r1
 8006b1a:	f025 0503 	bic.w	r5, r5, #3
 8006b1e:	3508      	adds	r5, #8
 8006b20:	2d0c      	cmp	r5, #12
 8006b22:	bf38      	it	cc
 8006b24:	250c      	movcc	r5, #12
 8006b26:	4638      	mov	r0, r7
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7ff ffa5 	bl	8006a78 <sbrk_aligned>
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d02b      	beq.n	8006b8a <_malloc_r+0xd2>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	442b      	add	r3, r5
 8006b36:	6023      	str	r3, [r4, #0]
 8006b38:	e00e      	b.n	8006b58 <_malloc_r+0xa0>
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	1b52      	subs	r2, r2, r5
 8006b3e:	d41e      	bmi.n	8006b7e <_malloc_r+0xc6>
 8006b40:	2a0b      	cmp	r2, #11
 8006b42:	d916      	bls.n	8006b72 <_malloc_r+0xba>
 8006b44:	1961      	adds	r1, r4, r5
 8006b46:	42a3      	cmp	r3, r4
 8006b48:	6025      	str	r5, [r4, #0]
 8006b4a:	bf18      	it	ne
 8006b4c:	6059      	strne	r1, [r3, #4]
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	bf08      	it	eq
 8006b52:	6031      	streq	r1, [r6, #0]
 8006b54:	5162      	str	r2, [r4, r5]
 8006b56:	604b      	str	r3, [r1, #4]
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f104 060b 	add.w	r6, r4, #11
 8006b5e:	f000 fd8d 	bl	800767c <__malloc_unlock>
 8006b62:	f026 0607 	bic.w	r6, r6, #7
 8006b66:	1d23      	adds	r3, r4, #4
 8006b68:	1af2      	subs	r2, r6, r3
 8006b6a:	d0b6      	beq.n	8006ada <_malloc_r+0x22>
 8006b6c:	1b9b      	subs	r3, r3, r6
 8006b6e:	50a3      	str	r3, [r4, r2]
 8006b70:	e7b3      	b.n	8006ada <_malloc_r+0x22>
 8006b72:	6862      	ldr	r2, [r4, #4]
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	bf0c      	ite	eq
 8006b78:	6032      	streq	r2, [r6, #0]
 8006b7a:	605a      	strne	r2, [r3, #4]
 8006b7c:	e7ec      	b.n	8006b58 <_malloc_r+0xa0>
 8006b7e:	4623      	mov	r3, r4
 8006b80:	6864      	ldr	r4, [r4, #4]
 8006b82:	e7b2      	b.n	8006aea <_malloc_r+0x32>
 8006b84:	4634      	mov	r4, r6
 8006b86:	6876      	ldr	r6, [r6, #4]
 8006b88:	e7b9      	b.n	8006afe <_malloc_r+0x46>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	603b      	str	r3, [r7, #0]
 8006b90:	f000 fd74 	bl	800767c <__malloc_unlock>
 8006b94:	e7a1      	b.n	8006ada <_malloc_r+0x22>
 8006b96:	6025      	str	r5, [r4, #0]
 8006b98:	e7de      	b.n	8006b58 <_malloc_r+0xa0>
 8006b9a:	bf00      	nop
 8006b9c:	200000e0 	.word	0x200000e0

08006ba0 <__sfputc_r>:
 8006ba0:	6893      	ldr	r3, [r2, #8]
 8006ba2:	b410      	push	{r4}
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	6093      	str	r3, [r2, #8]
 8006baa:	da07      	bge.n	8006bbc <__sfputc_r+0x1c>
 8006bac:	6994      	ldr	r4, [r2, #24]
 8006bae:	42a3      	cmp	r3, r4
 8006bb0:	db01      	blt.n	8006bb6 <__sfputc_r+0x16>
 8006bb2:	290a      	cmp	r1, #10
 8006bb4:	d102      	bne.n	8006bbc <__sfputc_r+0x1c>
 8006bb6:	bc10      	pop	{r4}
 8006bb8:	f000 bb34 	b.w	8007224 <__swbuf_r>
 8006bbc:	6813      	ldr	r3, [r2, #0]
 8006bbe:	1c58      	adds	r0, r3, #1
 8006bc0:	6010      	str	r0, [r2, #0]
 8006bc2:	7019      	strb	r1, [r3, #0]
 8006bc4:	4608      	mov	r0, r1
 8006bc6:	bc10      	pop	{r4}
 8006bc8:	4770      	bx	lr

08006bca <__sfputs_r>:
 8006bca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bcc:	4606      	mov	r6, r0
 8006bce:	460f      	mov	r7, r1
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	18d5      	adds	r5, r2, r3
 8006bd4:	42ac      	cmp	r4, r5
 8006bd6:	d101      	bne.n	8006bdc <__sfputs_r+0x12>
 8006bd8:	2000      	movs	r0, #0
 8006bda:	e007      	b.n	8006bec <__sfputs_r+0x22>
 8006bdc:	463a      	mov	r2, r7
 8006bde:	4630      	mov	r0, r6
 8006be0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006be4:	f7ff ffdc 	bl	8006ba0 <__sfputc_r>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d1f3      	bne.n	8006bd4 <__sfputs_r+0xa>
 8006bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bf0 <_vfiprintf_r>:
 8006bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	4698      	mov	r8, r3
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	b09d      	sub	sp, #116	; 0x74
 8006bfe:	b118      	cbz	r0, 8006c08 <_vfiprintf_r+0x18>
 8006c00:	6983      	ldr	r3, [r0, #24]
 8006c02:	b90b      	cbnz	r3, 8006c08 <_vfiprintf_r+0x18>
 8006c04:	f7ff fe98 	bl	8006938 <__sinit>
 8006c08:	4b89      	ldr	r3, [pc, #548]	; (8006e30 <_vfiprintf_r+0x240>)
 8006c0a:	429d      	cmp	r5, r3
 8006c0c:	d11b      	bne.n	8006c46 <_vfiprintf_r+0x56>
 8006c0e:	6875      	ldr	r5, [r6, #4]
 8006c10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c12:	07d9      	lsls	r1, r3, #31
 8006c14:	d405      	bmi.n	8006c22 <_vfiprintf_r+0x32>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	059a      	lsls	r2, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_vfiprintf_r+0x32>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f7ff ff29 	bl	8006a74 <__retarget_lock_acquire_recursive>
 8006c22:	89ab      	ldrh	r3, [r5, #12]
 8006c24:	071b      	lsls	r3, r3, #28
 8006c26:	d501      	bpl.n	8006c2c <_vfiprintf_r+0x3c>
 8006c28:	692b      	ldr	r3, [r5, #16]
 8006c2a:	b9eb      	cbnz	r3, 8006c68 <_vfiprintf_r+0x78>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 fb5c 	bl	80072ec <__swsetup_r>
 8006c34:	b1c0      	cbz	r0, 8006c68 <_vfiprintf_r+0x78>
 8006c36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c38:	07dc      	lsls	r4, r3, #31
 8006c3a:	d50e      	bpl.n	8006c5a <_vfiprintf_r+0x6a>
 8006c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c40:	b01d      	add	sp, #116	; 0x74
 8006c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c46:	4b7b      	ldr	r3, [pc, #492]	; (8006e34 <_vfiprintf_r+0x244>)
 8006c48:	429d      	cmp	r5, r3
 8006c4a:	d101      	bne.n	8006c50 <_vfiprintf_r+0x60>
 8006c4c:	68b5      	ldr	r5, [r6, #8]
 8006c4e:	e7df      	b.n	8006c10 <_vfiprintf_r+0x20>
 8006c50:	4b79      	ldr	r3, [pc, #484]	; (8006e38 <_vfiprintf_r+0x248>)
 8006c52:	429d      	cmp	r5, r3
 8006c54:	bf08      	it	eq
 8006c56:	68f5      	ldreq	r5, [r6, #12]
 8006c58:	e7da      	b.n	8006c10 <_vfiprintf_r+0x20>
 8006c5a:	89ab      	ldrh	r3, [r5, #12]
 8006c5c:	0598      	lsls	r0, r3, #22
 8006c5e:	d4ed      	bmi.n	8006c3c <_vfiprintf_r+0x4c>
 8006c60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c62:	f7ff ff08 	bl	8006a76 <__retarget_lock_release_recursive>
 8006c66:	e7e9      	b.n	8006c3c <_vfiprintf_r+0x4c>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c6c:	2320      	movs	r3, #32
 8006c6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c72:	2330      	movs	r3, #48	; 0x30
 8006c74:	f04f 0901 	mov.w	r9, #1
 8006c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c7c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006e3c <_vfiprintf_r+0x24c>
 8006c80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c84:	4623      	mov	r3, r4
 8006c86:	469a      	mov	sl, r3
 8006c88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c8c:	b10a      	cbz	r2, 8006c92 <_vfiprintf_r+0xa2>
 8006c8e:	2a25      	cmp	r2, #37	; 0x25
 8006c90:	d1f9      	bne.n	8006c86 <_vfiprintf_r+0x96>
 8006c92:	ebba 0b04 	subs.w	fp, sl, r4
 8006c96:	d00b      	beq.n	8006cb0 <_vfiprintf_r+0xc0>
 8006c98:	465b      	mov	r3, fp
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4630      	mov	r0, r6
 8006ca0:	f7ff ff93 	bl	8006bca <__sfputs_r>
 8006ca4:	3001      	adds	r0, #1
 8006ca6:	f000 80aa 	beq.w	8006dfe <_vfiprintf_r+0x20e>
 8006caa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cac:	445a      	add	r2, fp
 8006cae:	9209      	str	r2, [sp, #36]	; 0x24
 8006cb0:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 80a2 	beq.w	8006dfe <_vfiprintf_r+0x20e>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cc4:	f10a 0a01 	add.w	sl, sl, #1
 8006cc8:	9304      	str	r3, [sp, #16]
 8006cca:	9307      	str	r3, [sp, #28]
 8006ccc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cd0:	931a      	str	r3, [sp, #104]	; 0x68
 8006cd2:	4654      	mov	r4, sl
 8006cd4:	2205      	movs	r2, #5
 8006cd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cda:	4858      	ldr	r0, [pc, #352]	; (8006e3c <_vfiprintf_r+0x24c>)
 8006cdc:	f000 fcba 	bl	8007654 <memchr>
 8006ce0:	9a04      	ldr	r2, [sp, #16]
 8006ce2:	b9d8      	cbnz	r0, 8006d1c <_vfiprintf_r+0x12c>
 8006ce4:	06d1      	lsls	r1, r2, #27
 8006ce6:	bf44      	itt	mi
 8006ce8:	2320      	movmi	r3, #32
 8006cea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cee:	0713      	lsls	r3, r2, #28
 8006cf0:	bf44      	itt	mi
 8006cf2:	232b      	movmi	r3, #43	; 0x2b
 8006cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cf8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfe:	d015      	beq.n	8006d2c <_vfiprintf_r+0x13c>
 8006d00:	4654      	mov	r4, sl
 8006d02:	2000      	movs	r0, #0
 8006d04:	f04f 0c0a 	mov.w	ip, #10
 8006d08:	9a07      	ldr	r2, [sp, #28]
 8006d0a:	4621      	mov	r1, r4
 8006d0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d10:	3b30      	subs	r3, #48	; 0x30
 8006d12:	2b09      	cmp	r3, #9
 8006d14:	d94e      	bls.n	8006db4 <_vfiprintf_r+0x1c4>
 8006d16:	b1b0      	cbz	r0, 8006d46 <_vfiprintf_r+0x156>
 8006d18:	9207      	str	r2, [sp, #28]
 8006d1a:	e014      	b.n	8006d46 <_vfiprintf_r+0x156>
 8006d1c:	eba0 0308 	sub.w	r3, r0, r8
 8006d20:	fa09 f303 	lsl.w	r3, r9, r3
 8006d24:	4313      	orrs	r3, r2
 8006d26:	46a2      	mov	sl, r4
 8006d28:	9304      	str	r3, [sp, #16]
 8006d2a:	e7d2      	b.n	8006cd2 <_vfiprintf_r+0xe2>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	1d19      	adds	r1, r3, #4
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	9103      	str	r1, [sp, #12]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	bfbb      	ittet	lt
 8006d38:	425b      	neglt	r3, r3
 8006d3a:	f042 0202 	orrlt.w	r2, r2, #2
 8006d3e:	9307      	strge	r3, [sp, #28]
 8006d40:	9307      	strlt	r3, [sp, #28]
 8006d42:	bfb8      	it	lt
 8006d44:	9204      	strlt	r2, [sp, #16]
 8006d46:	7823      	ldrb	r3, [r4, #0]
 8006d48:	2b2e      	cmp	r3, #46	; 0x2e
 8006d4a:	d10c      	bne.n	8006d66 <_vfiprintf_r+0x176>
 8006d4c:	7863      	ldrb	r3, [r4, #1]
 8006d4e:	2b2a      	cmp	r3, #42	; 0x2a
 8006d50:	d135      	bne.n	8006dbe <_vfiprintf_r+0x1ce>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	3402      	adds	r4, #2
 8006d56:	1d1a      	adds	r2, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9203      	str	r2, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfb8      	it	lt
 8006d60:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d64:	9305      	str	r3, [sp, #20]
 8006d66:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006e40 <_vfiprintf_r+0x250>
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	4650      	mov	r0, sl
 8006d6e:	7821      	ldrb	r1, [r4, #0]
 8006d70:	f000 fc70 	bl	8007654 <memchr>
 8006d74:	b140      	cbz	r0, 8006d88 <_vfiprintf_r+0x198>
 8006d76:	2340      	movs	r3, #64	; 0x40
 8006d78:	eba0 000a 	sub.w	r0, r0, sl
 8006d7c:	fa03 f000 	lsl.w	r0, r3, r0
 8006d80:	9b04      	ldr	r3, [sp, #16]
 8006d82:	3401      	adds	r4, #1
 8006d84:	4303      	orrs	r3, r0
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d8c:	2206      	movs	r2, #6
 8006d8e:	482d      	ldr	r0, [pc, #180]	; (8006e44 <_vfiprintf_r+0x254>)
 8006d90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d94:	f000 fc5e 	bl	8007654 <memchr>
 8006d98:	2800      	cmp	r0, #0
 8006d9a:	d03f      	beq.n	8006e1c <_vfiprintf_r+0x22c>
 8006d9c:	4b2a      	ldr	r3, [pc, #168]	; (8006e48 <_vfiprintf_r+0x258>)
 8006d9e:	bb1b      	cbnz	r3, 8006de8 <_vfiprintf_r+0x1f8>
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	3307      	adds	r3, #7
 8006da4:	f023 0307 	bic.w	r3, r3, #7
 8006da8:	3308      	adds	r3, #8
 8006daa:	9303      	str	r3, [sp, #12]
 8006dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dae:	443b      	add	r3, r7
 8006db0:	9309      	str	r3, [sp, #36]	; 0x24
 8006db2:	e767      	b.n	8006c84 <_vfiprintf_r+0x94>
 8006db4:	460c      	mov	r4, r1
 8006db6:	2001      	movs	r0, #1
 8006db8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dbc:	e7a5      	b.n	8006d0a <_vfiprintf_r+0x11a>
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f04f 0c0a 	mov.w	ip, #10
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	3401      	adds	r4, #1
 8006dc8:	9305      	str	r3, [sp, #20]
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dd0:	3a30      	subs	r2, #48	; 0x30
 8006dd2:	2a09      	cmp	r2, #9
 8006dd4:	d903      	bls.n	8006dde <_vfiprintf_r+0x1ee>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d0c5      	beq.n	8006d66 <_vfiprintf_r+0x176>
 8006dda:	9105      	str	r1, [sp, #20]
 8006ddc:	e7c3      	b.n	8006d66 <_vfiprintf_r+0x176>
 8006dde:	4604      	mov	r4, r0
 8006de0:	2301      	movs	r3, #1
 8006de2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006de6:	e7f0      	b.n	8006dca <_vfiprintf_r+0x1da>
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	462a      	mov	r2, r5
 8006dee:	4630      	mov	r0, r6
 8006df0:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <_vfiprintf_r+0x25c>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	f3af 8000 	nop.w
 8006df8:	4607      	mov	r7, r0
 8006dfa:	1c78      	adds	r0, r7, #1
 8006dfc:	d1d6      	bne.n	8006dac <_vfiprintf_r+0x1bc>
 8006dfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e00:	07d9      	lsls	r1, r3, #31
 8006e02:	d405      	bmi.n	8006e10 <_vfiprintf_r+0x220>
 8006e04:	89ab      	ldrh	r3, [r5, #12]
 8006e06:	059a      	lsls	r2, r3, #22
 8006e08:	d402      	bmi.n	8006e10 <_vfiprintf_r+0x220>
 8006e0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e0c:	f7ff fe33 	bl	8006a76 <__retarget_lock_release_recursive>
 8006e10:	89ab      	ldrh	r3, [r5, #12]
 8006e12:	065b      	lsls	r3, r3, #25
 8006e14:	f53f af12 	bmi.w	8006c3c <_vfiprintf_r+0x4c>
 8006e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e1a:	e711      	b.n	8006c40 <_vfiprintf_r+0x50>
 8006e1c:	ab03      	add	r3, sp, #12
 8006e1e:	9300      	str	r3, [sp, #0]
 8006e20:	462a      	mov	r2, r5
 8006e22:	4630      	mov	r0, r6
 8006e24:	4b09      	ldr	r3, [pc, #36]	; (8006e4c <_vfiprintf_r+0x25c>)
 8006e26:	a904      	add	r1, sp, #16
 8006e28:	f000 f882 	bl	8006f30 <_printf_i>
 8006e2c:	e7e4      	b.n	8006df8 <_vfiprintf_r+0x208>
 8006e2e:	bf00      	nop
 8006e30:	08007808 	.word	0x08007808
 8006e34:	08007828 	.word	0x08007828
 8006e38:	080077e8 	.word	0x080077e8
 8006e3c:	08007848 	.word	0x08007848
 8006e40:	0800784e 	.word	0x0800784e
 8006e44:	08007852 	.word	0x08007852
 8006e48:	00000000 	.word	0x00000000
 8006e4c:	08006bcb 	.word	0x08006bcb

08006e50 <_printf_common>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	4616      	mov	r6, r2
 8006e56:	4699      	mov	r9, r3
 8006e58:	688a      	ldr	r2, [r1, #8]
 8006e5a:	690b      	ldr	r3, [r1, #16]
 8006e5c:	4607      	mov	r7, r0
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	bfb8      	it	lt
 8006e62:	4613      	movlt	r3, r2
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e70:	b10a      	cbz	r2, 8006e76 <_printf_common+0x26>
 8006e72:	3301      	adds	r3, #1
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	0699      	lsls	r1, r3, #26
 8006e7a:	bf42      	ittt	mi
 8006e7c:	6833      	ldrmi	r3, [r6, #0]
 8006e7e:	3302      	addmi	r3, #2
 8006e80:	6033      	strmi	r3, [r6, #0]
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	f015 0506 	ands.w	r5, r5, #6
 8006e88:	d106      	bne.n	8006e98 <_printf_common+0x48>
 8006e8a:	f104 0a19 	add.w	sl, r4, #25
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	6832      	ldr	r2, [r6, #0]
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dc28      	bgt.n	8006eea <_printf_common+0x9a>
 8006e98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e9c:	1e13      	subs	r3, r2, #0
 8006e9e:	6822      	ldr	r2, [r4, #0]
 8006ea0:	bf18      	it	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	0692      	lsls	r2, r2, #26
 8006ea6:	d42d      	bmi.n	8006f04 <_printf_common+0xb4>
 8006ea8:	4649      	mov	r1, r9
 8006eaa:	4638      	mov	r0, r7
 8006eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eb0:	47c0      	blx	r8
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d020      	beq.n	8006ef8 <_printf_common+0xa8>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	68e5      	ldr	r5, [r4, #12]
 8006eba:	f003 0306 	and.w	r3, r3, #6
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	bf18      	it	ne
 8006ec2:	2500      	movne	r5, #0
 8006ec4:	6832      	ldr	r2, [r6, #0]
 8006ec6:	f04f 0600 	mov.w	r6, #0
 8006eca:	68a3      	ldr	r3, [r4, #8]
 8006ecc:	bf08      	it	eq
 8006ece:	1aad      	subeq	r5, r5, r2
 8006ed0:	6922      	ldr	r2, [r4, #16]
 8006ed2:	bf08      	it	eq
 8006ed4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	bfc4      	itt	gt
 8006edc:	1a9b      	subgt	r3, r3, r2
 8006ede:	18ed      	addgt	r5, r5, r3
 8006ee0:	341a      	adds	r4, #26
 8006ee2:	42b5      	cmp	r5, r6
 8006ee4:	d11a      	bne.n	8006f1c <_printf_common+0xcc>
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	e008      	b.n	8006efc <_printf_common+0xac>
 8006eea:	2301      	movs	r3, #1
 8006eec:	4652      	mov	r2, sl
 8006eee:	4649      	mov	r1, r9
 8006ef0:	4638      	mov	r0, r7
 8006ef2:	47c0      	blx	r8
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d103      	bne.n	8006f00 <_printf_common+0xb0>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f00:	3501      	adds	r5, #1
 8006f02:	e7c4      	b.n	8006e8e <_printf_common+0x3e>
 8006f04:	2030      	movs	r0, #48	; 0x30
 8006f06:	18e1      	adds	r1, r4, r3
 8006f08:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f12:	4422      	add	r2, r4
 8006f14:	3302      	adds	r3, #2
 8006f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f1a:	e7c5      	b.n	8006ea8 <_printf_common+0x58>
 8006f1c:	2301      	movs	r3, #1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	4649      	mov	r1, r9
 8006f22:	4638      	mov	r0, r7
 8006f24:	47c0      	blx	r8
 8006f26:	3001      	adds	r0, #1
 8006f28:	d0e6      	beq.n	8006ef8 <_printf_common+0xa8>
 8006f2a:	3601      	adds	r6, #1
 8006f2c:	e7d9      	b.n	8006ee2 <_printf_common+0x92>
	...

08006f30 <_printf_i>:
 8006f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	7e0f      	ldrb	r7, [r1, #24]
 8006f36:	4691      	mov	r9, r2
 8006f38:	2f78      	cmp	r7, #120	; 0x78
 8006f3a:	4680      	mov	r8, r0
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	469a      	mov	sl, r3
 8006f40:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f46:	d807      	bhi.n	8006f58 <_printf_i+0x28>
 8006f48:	2f62      	cmp	r7, #98	; 0x62
 8006f4a:	d80a      	bhi.n	8006f62 <_printf_i+0x32>
 8006f4c:	2f00      	cmp	r7, #0
 8006f4e:	f000 80d9 	beq.w	8007104 <_printf_i+0x1d4>
 8006f52:	2f58      	cmp	r7, #88	; 0x58
 8006f54:	f000 80a4 	beq.w	80070a0 <_printf_i+0x170>
 8006f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f60:	e03a      	b.n	8006fd8 <_printf_i+0xa8>
 8006f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f66:	2b15      	cmp	r3, #21
 8006f68:	d8f6      	bhi.n	8006f58 <_printf_i+0x28>
 8006f6a:	a101      	add	r1, pc, #4	; (adr r1, 8006f70 <_printf_i+0x40>)
 8006f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f70:	08006fc9 	.word	0x08006fc9
 8006f74:	08006fdd 	.word	0x08006fdd
 8006f78:	08006f59 	.word	0x08006f59
 8006f7c:	08006f59 	.word	0x08006f59
 8006f80:	08006f59 	.word	0x08006f59
 8006f84:	08006f59 	.word	0x08006f59
 8006f88:	08006fdd 	.word	0x08006fdd
 8006f8c:	08006f59 	.word	0x08006f59
 8006f90:	08006f59 	.word	0x08006f59
 8006f94:	08006f59 	.word	0x08006f59
 8006f98:	08006f59 	.word	0x08006f59
 8006f9c:	080070eb 	.word	0x080070eb
 8006fa0:	0800700d 	.word	0x0800700d
 8006fa4:	080070cd 	.word	0x080070cd
 8006fa8:	08006f59 	.word	0x08006f59
 8006fac:	08006f59 	.word	0x08006f59
 8006fb0:	0800710d 	.word	0x0800710d
 8006fb4:	08006f59 	.word	0x08006f59
 8006fb8:	0800700d 	.word	0x0800700d
 8006fbc:	08006f59 	.word	0x08006f59
 8006fc0:	08006f59 	.word	0x08006f59
 8006fc4:	080070d5 	.word	0x080070d5
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	1d1a      	adds	r2, r3, #4
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	602a      	str	r2, [r5, #0]
 8006fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fd8:	2301      	movs	r3, #1
 8006fda:	e0a4      	b.n	8007126 <_printf_i+0x1f6>
 8006fdc:	6820      	ldr	r0, [r4, #0]
 8006fde:	6829      	ldr	r1, [r5, #0]
 8006fe0:	0606      	lsls	r6, r0, #24
 8006fe2:	f101 0304 	add.w	r3, r1, #4
 8006fe6:	d50a      	bpl.n	8006ffe <_printf_i+0xce>
 8006fe8:	680e      	ldr	r6, [r1, #0]
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	2e00      	cmp	r6, #0
 8006fee:	da03      	bge.n	8006ff8 <_printf_i+0xc8>
 8006ff0:	232d      	movs	r3, #45	; 0x2d
 8006ff2:	4276      	negs	r6, r6
 8006ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ff8:	230a      	movs	r3, #10
 8006ffa:	485e      	ldr	r0, [pc, #376]	; (8007174 <_printf_i+0x244>)
 8006ffc:	e019      	b.n	8007032 <_printf_i+0x102>
 8006ffe:	680e      	ldr	r6, [r1, #0]
 8007000:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007004:	602b      	str	r3, [r5, #0]
 8007006:	bf18      	it	ne
 8007008:	b236      	sxthne	r6, r6
 800700a:	e7ef      	b.n	8006fec <_printf_i+0xbc>
 800700c:	682b      	ldr	r3, [r5, #0]
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	1d19      	adds	r1, r3, #4
 8007012:	6029      	str	r1, [r5, #0]
 8007014:	0601      	lsls	r1, r0, #24
 8007016:	d501      	bpl.n	800701c <_printf_i+0xec>
 8007018:	681e      	ldr	r6, [r3, #0]
 800701a:	e002      	b.n	8007022 <_printf_i+0xf2>
 800701c:	0646      	lsls	r6, r0, #25
 800701e:	d5fb      	bpl.n	8007018 <_printf_i+0xe8>
 8007020:	881e      	ldrh	r6, [r3, #0]
 8007022:	2f6f      	cmp	r7, #111	; 0x6f
 8007024:	bf0c      	ite	eq
 8007026:	2308      	moveq	r3, #8
 8007028:	230a      	movne	r3, #10
 800702a:	4852      	ldr	r0, [pc, #328]	; (8007174 <_printf_i+0x244>)
 800702c:	2100      	movs	r1, #0
 800702e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007032:	6865      	ldr	r5, [r4, #4]
 8007034:	2d00      	cmp	r5, #0
 8007036:	bfa8      	it	ge
 8007038:	6821      	ldrge	r1, [r4, #0]
 800703a:	60a5      	str	r5, [r4, #8]
 800703c:	bfa4      	itt	ge
 800703e:	f021 0104 	bicge.w	r1, r1, #4
 8007042:	6021      	strge	r1, [r4, #0]
 8007044:	b90e      	cbnz	r6, 800704a <_printf_i+0x11a>
 8007046:	2d00      	cmp	r5, #0
 8007048:	d04d      	beq.n	80070e6 <_printf_i+0x1b6>
 800704a:	4615      	mov	r5, r2
 800704c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007050:	fb03 6711 	mls	r7, r3, r1, r6
 8007054:	5dc7      	ldrb	r7, [r0, r7]
 8007056:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800705a:	4637      	mov	r7, r6
 800705c:	42bb      	cmp	r3, r7
 800705e:	460e      	mov	r6, r1
 8007060:	d9f4      	bls.n	800704c <_printf_i+0x11c>
 8007062:	2b08      	cmp	r3, #8
 8007064:	d10b      	bne.n	800707e <_printf_i+0x14e>
 8007066:	6823      	ldr	r3, [r4, #0]
 8007068:	07de      	lsls	r6, r3, #31
 800706a:	d508      	bpl.n	800707e <_printf_i+0x14e>
 800706c:	6923      	ldr	r3, [r4, #16]
 800706e:	6861      	ldr	r1, [r4, #4]
 8007070:	4299      	cmp	r1, r3
 8007072:	bfde      	ittt	le
 8007074:	2330      	movle	r3, #48	; 0x30
 8007076:	f805 3c01 	strble.w	r3, [r5, #-1]
 800707a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800707e:	1b52      	subs	r2, r2, r5
 8007080:	6122      	str	r2, [r4, #16]
 8007082:	464b      	mov	r3, r9
 8007084:	4621      	mov	r1, r4
 8007086:	4640      	mov	r0, r8
 8007088:	f8cd a000 	str.w	sl, [sp]
 800708c:	aa03      	add	r2, sp, #12
 800708e:	f7ff fedf 	bl	8006e50 <_printf_common>
 8007092:	3001      	adds	r0, #1
 8007094:	d14c      	bne.n	8007130 <_printf_i+0x200>
 8007096:	f04f 30ff 	mov.w	r0, #4294967295
 800709a:	b004      	add	sp, #16
 800709c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a0:	4834      	ldr	r0, [pc, #208]	; (8007174 <_printf_i+0x244>)
 80070a2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80070a6:	6829      	ldr	r1, [r5, #0]
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80070ae:	6029      	str	r1, [r5, #0]
 80070b0:	061d      	lsls	r5, r3, #24
 80070b2:	d514      	bpl.n	80070de <_printf_i+0x1ae>
 80070b4:	07df      	lsls	r7, r3, #31
 80070b6:	bf44      	itt	mi
 80070b8:	f043 0320 	orrmi.w	r3, r3, #32
 80070bc:	6023      	strmi	r3, [r4, #0]
 80070be:	b91e      	cbnz	r6, 80070c8 <_printf_i+0x198>
 80070c0:	6823      	ldr	r3, [r4, #0]
 80070c2:	f023 0320 	bic.w	r3, r3, #32
 80070c6:	6023      	str	r3, [r4, #0]
 80070c8:	2310      	movs	r3, #16
 80070ca:	e7af      	b.n	800702c <_printf_i+0xfc>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	f043 0320 	orr.w	r3, r3, #32
 80070d2:	6023      	str	r3, [r4, #0]
 80070d4:	2378      	movs	r3, #120	; 0x78
 80070d6:	4828      	ldr	r0, [pc, #160]	; (8007178 <_printf_i+0x248>)
 80070d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070dc:	e7e3      	b.n	80070a6 <_printf_i+0x176>
 80070de:	0659      	lsls	r1, r3, #25
 80070e0:	bf48      	it	mi
 80070e2:	b2b6      	uxthmi	r6, r6
 80070e4:	e7e6      	b.n	80070b4 <_printf_i+0x184>
 80070e6:	4615      	mov	r5, r2
 80070e8:	e7bb      	b.n	8007062 <_printf_i+0x132>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	6826      	ldr	r6, [r4, #0]
 80070ee:	1d18      	adds	r0, r3, #4
 80070f0:	6961      	ldr	r1, [r4, #20]
 80070f2:	6028      	str	r0, [r5, #0]
 80070f4:	0635      	lsls	r5, r6, #24
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	d501      	bpl.n	80070fe <_printf_i+0x1ce>
 80070fa:	6019      	str	r1, [r3, #0]
 80070fc:	e002      	b.n	8007104 <_printf_i+0x1d4>
 80070fe:	0670      	lsls	r0, r6, #25
 8007100:	d5fb      	bpl.n	80070fa <_printf_i+0x1ca>
 8007102:	8019      	strh	r1, [r3, #0]
 8007104:	2300      	movs	r3, #0
 8007106:	4615      	mov	r5, r2
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	e7ba      	b.n	8007082 <_printf_i+0x152>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	2100      	movs	r1, #0
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	602a      	str	r2, [r5, #0]
 8007114:	681d      	ldr	r5, [r3, #0]
 8007116:	6862      	ldr	r2, [r4, #4]
 8007118:	4628      	mov	r0, r5
 800711a:	f000 fa9b 	bl	8007654 <memchr>
 800711e:	b108      	cbz	r0, 8007124 <_printf_i+0x1f4>
 8007120:	1b40      	subs	r0, r0, r5
 8007122:	6060      	str	r0, [r4, #4]
 8007124:	6863      	ldr	r3, [r4, #4]
 8007126:	6123      	str	r3, [r4, #16]
 8007128:	2300      	movs	r3, #0
 800712a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800712e:	e7a8      	b.n	8007082 <_printf_i+0x152>
 8007130:	462a      	mov	r2, r5
 8007132:	4649      	mov	r1, r9
 8007134:	4640      	mov	r0, r8
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	47d0      	blx	sl
 800713a:	3001      	adds	r0, #1
 800713c:	d0ab      	beq.n	8007096 <_printf_i+0x166>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	079b      	lsls	r3, r3, #30
 8007142:	d413      	bmi.n	800716c <_printf_i+0x23c>
 8007144:	68e0      	ldr	r0, [r4, #12]
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	4298      	cmp	r0, r3
 800714a:	bfb8      	it	lt
 800714c:	4618      	movlt	r0, r3
 800714e:	e7a4      	b.n	800709a <_printf_i+0x16a>
 8007150:	2301      	movs	r3, #1
 8007152:	4632      	mov	r2, r6
 8007154:	4649      	mov	r1, r9
 8007156:	4640      	mov	r0, r8
 8007158:	47d0      	blx	sl
 800715a:	3001      	adds	r0, #1
 800715c:	d09b      	beq.n	8007096 <_printf_i+0x166>
 800715e:	3501      	adds	r5, #1
 8007160:	68e3      	ldr	r3, [r4, #12]
 8007162:	9903      	ldr	r1, [sp, #12]
 8007164:	1a5b      	subs	r3, r3, r1
 8007166:	42ab      	cmp	r3, r5
 8007168:	dcf2      	bgt.n	8007150 <_printf_i+0x220>
 800716a:	e7eb      	b.n	8007144 <_printf_i+0x214>
 800716c:	2500      	movs	r5, #0
 800716e:	f104 0619 	add.w	r6, r4, #25
 8007172:	e7f5      	b.n	8007160 <_printf_i+0x230>
 8007174:	08007859 	.word	0x08007859
 8007178:	0800786a 	.word	0x0800786a

0800717c <_sbrk_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	2300      	movs	r3, #0
 8007180:	4d05      	ldr	r5, [pc, #20]	; (8007198 <_sbrk_r+0x1c>)
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	602b      	str	r3, [r5, #0]
 8007188:	f7fe f9ca 	bl	8005520 <_sbrk>
 800718c:	1c43      	adds	r3, r0, #1
 800718e:	d102      	bne.n	8007196 <_sbrk_r+0x1a>
 8007190:	682b      	ldr	r3, [r5, #0]
 8007192:	b103      	cbz	r3, 8007196 <_sbrk_r+0x1a>
 8007194:	6023      	str	r3, [r4, #0]
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	200000e8 	.word	0x200000e8

0800719c <__sread>:
 800719c:	b510      	push	{r4, lr}
 800719e:	460c      	mov	r4, r1
 80071a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a4:	f000 fab8 	bl	8007718 <_read_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	bfab      	itete	ge
 80071ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80071ae:	89a3      	ldrhlt	r3, [r4, #12]
 80071b0:	181b      	addge	r3, r3, r0
 80071b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80071b6:	bfac      	ite	ge
 80071b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80071ba:	81a3      	strhlt	r3, [r4, #12]
 80071bc:	bd10      	pop	{r4, pc}

080071be <__swrite>:
 80071be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c2:	461f      	mov	r7, r3
 80071c4:	898b      	ldrh	r3, [r1, #12]
 80071c6:	4605      	mov	r5, r0
 80071c8:	05db      	lsls	r3, r3, #23
 80071ca:	460c      	mov	r4, r1
 80071cc:	4616      	mov	r6, r2
 80071ce:	d505      	bpl.n	80071dc <__swrite+0x1e>
 80071d0:	2302      	movs	r3, #2
 80071d2:	2200      	movs	r2, #0
 80071d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071d8:	f000 f9c4 	bl	8007564 <_lseek_r>
 80071dc:	89a3      	ldrh	r3, [r4, #12]
 80071de:	4632      	mov	r2, r6
 80071e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80071e4:	81a3      	strh	r3, [r4, #12]
 80071e6:	4628      	mov	r0, r5
 80071e8:	463b      	mov	r3, r7
 80071ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071f2:	f000 b869 	b.w	80072c8 <_write_r>

080071f6 <__sseek>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	460c      	mov	r4, r1
 80071fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071fe:	f000 f9b1 	bl	8007564 <_lseek_r>
 8007202:	1c43      	adds	r3, r0, #1
 8007204:	89a3      	ldrh	r3, [r4, #12]
 8007206:	bf15      	itete	ne
 8007208:	6560      	strne	r0, [r4, #84]	; 0x54
 800720a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800720e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007212:	81a3      	strheq	r3, [r4, #12]
 8007214:	bf18      	it	ne
 8007216:	81a3      	strhne	r3, [r4, #12]
 8007218:	bd10      	pop	{r4, pc}

0800721a <__sclose>:
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 b8d3 	b.w	80073c8 <_close_r>
	...

08007224 <__swbuf_r>:
 8007224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007226:	460e      	mov	r6, r1
 8007228:	4614      	mov	r4, r2
 800722a:	4605      	mov	r5, r0
 800722c:	b118      	cbz	r0, 8007236 <__swbuf_r+0x12>
 800722e:	6983      	ldr	r3, [r0, #24]
 8007230:	b90b      	cbnz	r3, 8007236 <__swbuf_r+0x12>
 8007232:	f7ff fb81 	bl	8006938 <__sinit>
 8007236:	4b21      	ldr	r3, [pc, #132]	; (80072bc <__swbuf_r+0x98>)
 8007238:	429c      	cmp	r4, r3
 800723a:	d12b      	bne.n	8007294 <__swbuf_r+0x70>
 800723c:	686c      	ldr	r4, [r5, #4]
 800723e:	69a3      	ldr	r3, [r4, #24]
 8007240:	60a3      	str	r3, [r4, #8]
 8007242:	89a3      	ldrh	r3, [r4, #12]
 8007244:	071a      	lsls	r2, r3, #28
 8007246:	d52f      	bpl.n	80072a8 <__swbuf_r+0x84>
 8007248:	6923      	ldr	r3, [r4, #16]
 800724a:	b36b      	cbz	r3, 80072a8 <__swbuf_r+0x84>
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	6820      	ldr	r0, [r4, #0]
 8007250:	b2f6      	uxtb	r6, r6
 8007252:	1ac0      	subs	r0, r0, r3
 8007254:	6963      	ldr	r3, [r4, #20]
 8007256:	4637      	mov	r7, r6
 8007258:	4283      	cmp	r3, r0
 800725a:	dc04      	bgt.n	8007266 <__swbuf_r+0x42>
 800725c:	4621      	mov	r1, r4
 800725e:	4628      	mov	r0, r5
 8007260:	f000 f944 	bl	80074ec <_fflush_r>
 8007264:	bb30      	cbnz	r0, 80072b4 <__swbuf_r+0x90>
 8007266:	68a3      	ldr	r3, [r4, #8]
 8007268:	3001      	adds	r0, #1
 800726a:	3b01      	subs	r3, #1
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	1c5a      	adds	r2, r3, #1
 8007272:	6022      	str	r2, [r4, #0]
 8007274:	701e      	strb	r6, [r3, #0]
 8007276:	6963      	ldr	r3, [r4, #20]
 8007278:	4283      	cmp	r3, r0
 800727a:	d004      	beq.n	8007286 <__swbuf_r+0x62>
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	07db      	lsls	r3, r3, #31
 8007280:	d506      	bpl.n	8007290 <__swbuf_r+0x6c>
 8007282:	2e0a      	cmp	r6, #10
 8007284:	d104      	bne.n	8007290 <__swbuf_r+0x6c>
 8007286:	4621      	mov	r1, r4
 8007288:	4628      	mov	r0, r5
 800728a:	f000 f92f 	bl	80074ec <_fflush_r>
 800728e:	b988      	cbnz	r0, 80072b4 <__swbuf_r+0x90>
 8007290:	4638      	mov	r0, r7
 8007292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007294:	4b0a      	ldr	r3, [pc, #40]	; (80072c0 <__swbuf_r+0x9c>)
 8007296:	429c      	cmp	r4, r3
 8007298:	d101      	bne.n	800729e <__swbuf_r+0x7a>
 800729a:	68ac      	ldr	r4, [r5, #8]
 800729c:	e7cf      	b.n	800723e <__swbuf_r+0x1a>
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <__swbuf_r+0xa0>)
 80072a0:	429c      	cmp	r4, r3
 80072a2:	bf08      	it	eq
 80072a4:	68ec      	ldreq	r4, [r5, #12]
 80072a6:	e7ca      	b.n	800723e <__swbuf_r+0x1a>
 80072a8:	4621      	mov	r1, r4
 80072aa:	4628      	mov	r0, r5
 80072ac:	f000 f81e 	bl	80072ec <__swsetup_r>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d0cb      	beq.n	800724c <__swbuf_r+0x28>
 80072b4:	f04f 37ff 	mov.w	r7, #4294967295
 80072b8:	e7ea      	b.n	8007290 <__swbuf_r+0x6c>
 80072ba:	bf00      	nop
 80072bc:	08007808 	.word	0x08007808
 80072c0:	08007828 	.word	0x08007828
 80072c4:	080077e8 	.word	0x080077e8

080072c8 <_write_r>:
 80072c8:	b538      	push	{r3, r4, r5, lr}
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	4611      	mov	r1, r2
 80072d0:	2200      	movs	r2, #0
 80072d2:	4d05      	ldr	r5, [pc, #20]	; (80072e8 <_write_r+0x20>)
 80072d4:	602a      	str	r2, [r5, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	f7fe f8d6 	bl	8005488 <_write>
 80072dc:	1c43      	adds	r3, r0, #1
 80072de:	d102      	bne.n	80072e6 <_write_r+0x1e>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	b103      	cbz	r3, 80072e6 <_write_r+0x1e>
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	bd38      	pop	{r3, r4, r5, pc}
 80072e8:	200000e8 	.word	0x200000e8

080072ec <__swsetup_r>:
 80072ec:	4b32      	ldr	r3, [pc, #200]	; (80073b8 <__swsetup_r+0xcc>)
 80072ee:	b570      	push	{r4, r5, r6, lr}
 80072f0:	681d      	ldr	r5, [r3, #0]
 80072f2:	4606      	mov	r6, r0
 80072f4:	460c      	mov	r4, r1
 80072f6:	b125      	cbz	r5, 8007302 <__swsetup_r+0x16>
 80072f8:	69ab      	ldr	r3, [r5, #24]
 80072fa:	b913      	cbnz	r3, 8007302 <__swsetup_r+0x16>
 80072fc:	4628      	mov	r0, r5
 80072fe:	f7ff fb1b 	bl	8006938 <__sinit>
 8007302:	4b2e      	ldr	r3, [pc, #184]	; (80073bc <__swsetup_r+0xd0>)
 8007304:	429c      	cmp	r4, r3
 8007306:	d10f      	bne.n	8007328 <__swsetup_r+0x3c>
 8007308:	686c      	ldr	r4, [r5, #4]
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007310:	0719      	lsls	r1, r3, #28
 8007312:	d42c      	bmi.n	800736e <__swsetup_r+0x82>
 8007314:	06dd      	lsls	r5, r3, #27
 8007316:	d411      	bmi.n	800733c <__swsetup_r+0x50>
 8007318:	2309      	movs	r3, #9
 800731a:	6033      	str	r3, [r6, #0]
 800731c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	81a3      	strh	r3, [r4, #12]
 8007326:	e03e      	b.n	80073a6 <__swsetup_r+0xba>
 8007328:	4b25      	ldr	r3, [pc, #148]	; (80073c0 <__swsetup_r+0xd4>)
 800732a:	429c      	cmp	r4, r3
 800732c:	d101      	bne.n	8007332 <__swsetup_r+0x46>
 800732e:	68ac      	ldr	r4, [r5, #8]
 8007330:	e7eb      	b.n	800730a <__swsetup_r+0x1e>
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <__swsetup_r+0xd8>)
 8007334:	429c      	cmp	r4, r3
 8007336:	bf08      	it	eq
 8007338:	68ec      	ldreq	r4, [r5, #12]
 800733a:	e7e6      	b.n	800730a <__swsetup_r+0x1e>
 800733c:	0758      	lsls	r0, r3, #29
 800733e:	d512      	bpl.n	8007366 <__swsetup_r+0x7a>
 8007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007342:	b141      	cbz	r1, 8007356 <__swsetup_r+0x6a>
 8007344:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007348:	4299      	cmp	r1, r3
 800734a:	d002      	beq.n	8007352 <__swsetup_r+0x66>
 800734c:	4630      	mov	r0, r6
 800734e:	f000 f99b 	bl	8007688 <_free_r>
 8007352:	2300      	movs	r3, #0
 8007354:	6363      	str	r3, [r4, #52]	; 0x34
 8007356:	89a3      	ldrh	r3, [r4, #12]
 8007358:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800735c:	81a3      	strh	r3, [r4, #12]
 800735e:	2300      	movs	r3, #0
 8007360:	6063      	str	r3, [r4, #4]
 8007362:	6923      	ldr	r3, [r4, #16]
 8007364:	6023      	str	r3, [r4, #0]
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	f043 0308 	orr.w	r3, r3, #8
 800736c:	81a3      	strh	r3, [r4, #12]
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	b94b      	cbnz	r3, 8007386 <__swsetup_r+0x9a>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007378:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800737c:	d003      	beq.n	8007386 <__swsetup_r+0x9a>
 800737e:	4621      	mov	r1, r4
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f927 	bl	80075d4 <__smakebuf_r>
 8007386:	89a0      	ldrh	r0, [r4, #12]
 8007388:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800738c:	f010 0301 	ands.w	r3, r0, #1
 8007390:	d00a      	beq.n	80073a8 <__swsetup_r+0xbc>
 8007392:	2300      	movs	r3, #0
 8007394:	60a3      	str	r3, [r4, #8]
 8007396:	6963      	ldr	r3, [r4, #20]
 8007398:	425b      	negs	r3, r3
 800739a:	61a3      	str	r3, [r4, #24]
 800739c:	6923      	ldr	r3, [r4, #16]
 800739e:	b943      	cbnz	r3, 80073b2 <__swsetup_r+0xc6>
 80073a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073a4:	d1ba      	bne.n	800731c <__swsetup_r+0x30>
 80073a6:	bd70      	pop	{r4, r5, r6, pc}
 80073a8:	0781      	lsls	r1, r0, #30
 80073aa:	bf58      	it	pl
 80073ac:	6963      	ldrpl	r3, [r4, #20]
 80073ae:	60a3      	str	r3, [r4, #8]
 80073b0:	e7f4      	b.n	800739c <__swsetup_r+0xb0>
 80073b2:	2000      	movs	r0, #0
 80073b4:	e7f7      	b.n	80073a6 <__swsetup_r+0xba>
 80073b6:	bf00      	nop
 80073b8:	2000000c 	.word	0x2000000c
 80073bc:	08007808 	.word	0x08007808
 80073c0:	08007828 	.word	0x08007828
 80073c4:	080077e8 	.word	0x080077e8

080073c8 <_close_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	2300      	movs	r3, #0
 80073cc:	4d05      	ldr	r5, [pc, #20]	; (80073e4 <_close_r+0x1c>)
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7fe f874 	bl	80054c0 <_close>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_close_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_close_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	200000e8 	.word	0x200000e8

080073e8 <__sflush_r>:
 80073e8:	898a      	ldrh	r2, [r1, #12]
 80073ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ec:	4605      	mov	r5, r0
 80073ee:	0710      	lsls	r0, r2, #28
 80073f0:	460c      	mov	r4, r1
 80073f2:	d457      	bmi.n	80074a4 <__sflush_r+0xbc>
 80073f4:	684b      	ldr	r3, [r1, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	dc04      	bgt.n	8007404 <__sflush_r+0x1c>
 80073fa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	dc01      	bgt.n	8007404 <__sflush_r+0x1c>
 8007400:	2000      	movs	r0, #0
 8007402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007406:	2e00      	cmp	r6, #0
 8007408:	d0fa      	beq.n	8007400 <__sflush_r+0x18>
 800740a:	2300      	movs	r3, #0
 800740c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007410:	682f      	ldr	r7, [r5, #0]
 8007412:	602b      	str	r3, [r5, #0]
 8007414:	d032      	beq.n	800747c <__sflush_r+0x94>
 8007416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	075a      	lsls	r2, r3, #29
 800741c:	d505      	bpl.n	800742a <__sflush_r+0x42>
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	1ac0      	subs	r0, r0, r3
 8007422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007424:	b10b      	cbz	r3, 800742a <__sflush_r+0x42>
 8007426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007428:	1ac0      	subs	r0, r0, r3
 800742a:	2300      	movs	r3, #0
 800742c:	4602      	mov	r2, r0
 800742e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007430:	4628      	mov	r0, r5
 8007432:	6a21      	ldr	r1, [r4, #32]
 8007434:	47b0      	blx	r6
 8007436:	1c43      	adds	r3, r0, #1
 8007438:	89a3      	ldrh	r3, [r4, #12]
 800743a:	d106      	bne.n	800744a <__sflush_r+0x62>
 800743c:	6829      	ldr	r1, [r5, #0]
 800743e:	291d      	cmp	r1, #29
 8007440:	d82c      	bhi.n	800749c <__sflush_r+0xb4>
 8007442:	4a29      	ldr	r2, [pc, #164]	; (80074e8 <__sflush_r+0x100>)
 8007444:	40ca      	lsrs	r2, r1
 8007446:	07d6      	lsls	r6, r2, #31
 8007448:	d528      	bpl.n	800749c <__sflush_r+0xb4>
 800744a:	2200      	movs	r2, #0
 800744c:	6062      	str	r2, [r4, #4]
 800744e:	6922      	ldr	r2, [r4, #16]
 8007450:	04d9      	lsls	r1, r3, #19
 8007452:	6022      	str	r2, [r4, #0]
 8007454:	d504      	bpl.n	8007460 <__sflush_r+0x78>
 8007456:	1c42      	adds	r2, r0, #1
 8007458:	d101      	bne.n	800745e <__sflush_r+0x76>
 800745a:	682b      	ldr	r3, [r5, #0]
 800745c:	b903      	cbnz	r3, 8007460 <__sflush_r+0x78>
 800745e:	6560      	str	r0, [r4, #84]	; 0x54
 8007460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007462:	602f      	str	r7, [r5, #0]
 8007464:	2900      	cmp	r1, #0
 8007466:	d0cb      	beq.n	8007400 <__sflush_r+0x18>
 8007468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800746c:	4299      	cmp	r1, r3
 800746e:	d002      	beq.n	8007476 <__sflush_r+0x8e>
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f909 	bl	8007688 <_free_r>
 8007476:	2000      	movs	r0, #0
 8007478:	6360      	str	r0, [r4, #52]	; 0x34
 800747a:	e7c2      	b.n	8007402 <__sflush_r+0x1a>
 800747c:	6a21      	ldr	r1, [r4, #32]
 800747e:	2301      	movs	r3, #1
 8007480:	4628      	mov	r0, r5
 8007482:	47b0      	blx	r6
 8007484:	1c41      	adds	r1, r0, #1
 8007486:	d1c7      	bne.n	8007418 <__sflush_r+0x30>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0c4      	beq.n	8007418 <__sflush_r+0x30>
 800748e:	2b1d      	cmp	r3, #29
 8007490:	d001      	beq.n	8007496 <__sflush_r+0xae>
 8007492:	2b16      	cmp	r3, #22
 8007494:	d101      	bne.n	800749a <__sflush_r+0xb2>
 8007496:	602f      	str	r7, [r5, #0]
 8007498:	e7b2      	b.n	8007400 <__sflush_r+0x18>
 800749a:	89a3      	ldrh	r3, [r4, #12]
 800749c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074a0:	81a3      	strh	r3, [r4, #12]
 80074a2:	e7ae      	b.n	8007402 <__sflush_r+0x1a>
 80074a4:	690f      	ldr	r7, [r1, #16]
 80074a6:	2f00      	cmp	r7, #0
 80074a8:	d0aa      	beq.n	8007400 <__sflush_r+0x18>
 80074aa:	0793      	lsls	r3, r2, #30
 80074ac:	bf18      	it	ne
 80074ae:	2300      	movne	r3, #0
 80074b0:	680e      	ldr	r6, [r1, #0]
 80074b2:	bf08      	it	eq
 80074b4:	694b      	ldreq	r3, [r1, #20]
 80074b6:	1bf6      	subs	r6, r6, r7
 80074b8:	600f      	str	r7, [r1, #0]
 80074ba:	608b      	str	r3, [r1, #8]
 80074bc:	2e00      	cmp	r6, #0
 80074be:	dd9f      	ble.n	8007400 <__sflush_r+0x18>
 80074c0:	4633      	mov	r3, r6
 80074c2:	463a      	mov	r2, r7
 80074c4:	4628      	mov	r0, r5
 80074c6:	6a21      	ldr	r1, [r4, #32]
 80074c8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80074cc:	47e0      	blx	ip
 80074ce:	2800      	cmp	r0, #0
 80074d0:	dc06      	bgt.n	80074e0 <__sflush_r+0xf8>
 80074d2:	89a3      	ldrh	r3, [r4, #12]
 80074d4:	f04f 30ff 	mov.w	r0, #4294967295
 80074d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074dc:	81a3      	strh	r3, [r4, #12]
 80074de:	e790      	b.n	8007402 <__sflush_r+0x1a>
 80074e0:	4407      	add	r7, r0
 80074e2:	1a36      	subs	r6, r6, r0
 80074e4:	e7ea      	b.n	80074bc <__sflush_r+0xd4>
 80074e6:	bf00      	nop
 80074e8:	20400001 	.word	0x20400001

080074ec <_fflush_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	4605      	mov	r5, r0
 80074f2:	460c      	mov	r4, r1
 80074f4:	b913      	cbnz	r3, 80074fc <_fflush_r+0x10>
 80074f6:	2500      	movs	r5, #0
 80074f8:	4628      	mov	r0, r5
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	b118      	cbz	r0, 8007506 <_fflush_r+0x1a>
 80074fe:	6983      	ldr	r3, [r0, #24]
 8007500:	b90b      	cbnz	r3, 8007506 <_fflush_r+0x1a>
 8007502:	f7ff fa19 	bl	8006938 <__sinit>
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <_fflush_r+0x6c>)
 8007508:	429c      	cmp	r4, r3
 800750a:	d11b      	bne.n	8007544 <_fflush_r+0x58>
 800750c:	686c      	ldr	r4, [r5, #4]
 800750e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d0ef      	beq.n	80074f6 <_fflush_r+0xa>
 8007516:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007518:	07d0      	lsls	r0, r2, #31
 800751a:	d404      	bmi.n	8007526 <_fflush_r+0x3a>
 800751c:	0599      	lsls	r1, r3, #22
 800751e:	d402      	bmi.n	8007526 <_fflush_r+0x3a>
 8007520:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007522:	f7ff faa7 	bl	8006a74 <__retarget_lock_acquire_recursive>
 8007526:	4628      	mov	r0, r5
 8007528:	4621      	mov	r1, r4
 800752a:	f7ff ff5d 	bl	80073e8 <__sflush_r>
 800752e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007530:	4605      	mov	r5, r0
 8007532:	07da      	lsls	r2, r3, #31
 8007534:	d4e0      	bmi.n	80074f8 <_fflush_r+0xc>
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	059b      	lsls	r3, r3, #22
 800753a:	d4dd      	bmi.n	80074f8 <_fflush_r+0xc>
 800753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800753e:	f7ff fa9a 	bl	8006a76 <__retarget_lock_release_recursive>
 8007542:	e7d9      	b.n	80074f8 <_fflush_r+0xc>
 8007544:	4b05      	ldr	r3, [pc, #20]	; (800755c <_fflush_r+0x70>)
 8007546:	429c      	cmp	r4, r3
 8007548:	d101      	bne.n	800754e <_fflush_r+0x62>
 800754a:	68ac      	ldr	r4, [r5, #8]
 800754c:	e7df      	b.n	800750e <_fflush_r+0x22>
 800754e:	4b04      	ldr	r3, [pc, #16]	; (8007560 <_fflush_r+0x74>)
 8007550:	429c      	cmp	r4, r3
 8007552:	bf08      	it	eq
 8007554:	68ec      	ldreq	r4, [r5, #12]
 8007556:	e7da      	b.n	800750e <_fflush_r+0x22>
 8007558:	08007808 	.word	0x08007808
 800755c:	08007828 	.word	0x08007828
 8007560:	080077e8 	.word	0x080077e8

08007564 <_lseek_r>:
 8007564:	b538      	push	{r3, r4, r5, lr}
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	2200      	movs	r2, #0
 800756e:	4d05      	ldr	r5, [pc, #20]	; (8007584 <_lseek_r+0x20>)
 8007570:	602a      	str	r2, [r5, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f7fd ffc8 	bl	8005508 <_lseek>
 8007578:	1c43      	adds	r3, r0, #1
 800757a:	d102      	bne.n	8007582 <_lseek_r+0x1e>
 800757c:	682b      	ldr	r3, [r5, #0]
 800757e:	b103      	cbz	r3, 8007582 <_lseek_r+0x1e>
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	bd38      	pop	{r3, r4, r5, pc}
 8007584:	200000e8 	.word	0x200000e8

08007588 <__swhatbuf_r>:
 8007588:	b570      	push	{r4, r5, r6, lr}
 800758a:	460e      	mov	r6, r1
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	4614      	mov	r4, r2
 8007592:	2900      	cmp	r1, #0
 8007594:	461d      	mov	r5, r3
 8007596:	b096      	sub	sp, #88	; 0x58
 8007598:	da08      	bge.n	80075ac <__swhatbuf_r+0x24>
 800759a:	2200      	movs	r2, #0
 800759c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075a0:	602a      	str	r2, [r5, #0]
 80075a2:	061a      	lsls	r2, r3, #24
 80075a4:	d410      	bmi.n	80075c8 <__swhatbuf_r+0x40>
 80075a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075aa:	e00e      	b.n	80075ca <__swhatbuf_r+0x42>
 80075ac:	466a      	mov	r2, sp
 80075ae:	f000 f8c5 	bl	800773c <_fstat_r>
 80075b2:	2800      	cmp	r0, #0
 80075b4:	dbf1      	blt.n	800759a <__swhatbuf_r+0x12>
 80075b6:	9a01      	ldr	r2, [sp, #4]
 80075b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80075bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80075c0:	425a      	negs	r2, r3
 80075c2:	415a      	adcs	r2, r3
 80075c4:	602a      	str	r2, [r5, #0]
 80075c6:	e7ee      	b.n	80075a6 <__swhatbuf_r+0x1e>
 80075c8:	2340      	movs	r3, #64	; 0x40
 80075ca:	2000      	movs	r0, #0
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	b016      	add	sp, #88	; 0x58
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
	...

080075d4 <__smakebuf_r>:
 80075d4:	898b      	ldrh	r3, [r1, #12]
 80075d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075d8:	079d      	lsls	r5, r3, #30
 80075da:	4606      	mov	r6, r0
 80075dc:	460c      	mov	r4, r1
 80075de:	d507      	bpl.n	80075f0 <__smakebuf_r+0x1c>
 80075e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	6123      	str	r3, [r4, #16]
 80075e8:	2301      	movs	r3, #1
 80075ea:	6163      	str	r3, [r4, #20]
 80075ec:	b002      	add	sp, #8
 80075ee:	bd70      	pop	{r4, r5, r6, pc}
 80075f0:	466a      	mov	r2, sp
 80075f2:	ab01      	add	r3, sp, #4
 80075f4:	f7ff ffc8 	bl	8007588 <__swhatbuf_r>
 80075f8:	9900      	ldr	r1, [sp, #0]
 80075fa:	4605      	mov	r5, r0
 80075fc:	4630      	mov	r0, r6
 80075fe:	f7ff fa5b 	bl	8006ab8 <_malloc_r>
 8007602:	b948      	cbnz	r0, 8007618 <__smakebuf_r+0x44>
 8007604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007608:	059a      	lsls	r2, r3, #22
 800760a:	d4ef      	bmi.n	80075ec <__smakebuf_r+0x18>
 800760c:	f023 0303 	bic.w	r3, r3, #3
 8007610:	f043 0302 	orr.w	r3, r3, #2
 8007614:	81a3      	strh	r3, [r4, #12]
 8007616:	e7e3      	b.n	80075e0 <__smakebuf_r+0xc>
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <__smakebuf_r+0x7c>)
 800761a:	62b3      	str	r3, [r6, #40]	; 0x28
 800761c:	89a3      	ldrh	r3, [r4, #12]
 800761e:	6020      	str	r0, [r4, #0]
 8007620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007624:	81a3      	strh	r3, [r4, #12]
 8007626:	9b00      	ldr	r3, [sp, #0]
 8007628:	6120      	str	r0, [r4, #16]
 800762a:	6163      	str	r3, [r4, #20]
 800762c:	9b01      	ldr	r3, [sp, #4]
 800762e:	b15b      	cbz	r3, 8007648 <__smakebuf_r+0x74>
 8007630:	4630      	mov	r0, r6
 8007632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007636:	f000 f893 	bl	8007760 <_isatty_r>
 800763a:	b128      	cbz	r0, 8007648 <__smakebuf_r+0x74>
 800763c:	89a3      	ldrh	r3, [r4, #12]
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	f043 0301 	orr.w	r3, r3, #1
 8007646:	81a3      	strh	r3, [r4, #12]
 8007648:	89a0      	ldrh	r0, [r4, #12]
 800764a:	4305      	orrs	r5, r0
 800764c:	81a5      	strh	r5, [r4, #12]
 800764e:	e7cd      	b.n	80075ec <__smakebuf_r+0x18>
 8007650:	080068d1 	.word	0x080068d1

08007654 <memchr>:
 8007654:	4603      	mov	r3, r0
 8007656:	b510      	push	{r4, lr}
 8007658:	b2c9      	uxtb	r1, r1
 800765a:	4402      	add	r2, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	4618      	mov	r0, r3
 8007660:	d101      	bne.n	8007666 <memchr+0x12>
 8007662:	2000      	movs	r0, #0
 8007664:	e003      	b.n	800766e <memchr+0x1a>
 8007666:	7804      	ldrb	r4, [r0, #0]
 8007668:	3301      	adds	r3, #1
 800766a:	428c      	cmp	r4, r1
 800766c:	d1f6      	bne.n	800765c <memchr+0x8>
 800766e:	bd10      	pop	{r4, pc}

08007670 <__malloc_lock>:
 8007670:	4801      	ldr	r0, [pc, #4]	; (8007678 <__malloc_lock+0x8>)
 8007672:	f7ff b9ff 	b.w	8006a74 <__retarget_lock_acquire_recursive>
 8007676:	bf00      	nop
 8007678:	200000dc 	.word	0x200000dc

0800767c <__malloc_unlock>:
 800767c:	4801      	ldr	r0, [pc, #4]	; (8007684 <__malloc_unlock+0x8>)
 800767e:	f7ff b9fa 	b.w	8006a76 <__retarget_lock_release_recursive>
 8007682:	bf00      	nop
 8007684:	200000dc 	.word	0x200000dc

08007688 <_free_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4605      	mov	r5, r0
 800768c:	2900      	cmp	r1, #0
 800768e:	d040      	beq.n	8007712 <_free_r+0x8a>
 8007690:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007694:	1f0c      	subs	r4, r1, #4
 8007696:	2b00      	cmp	r3, #0
 8007698:	bfb8      	it	lt
 800769a:	18e4      	addlt	r4, r4, r3
 800769c:	f7ff ffe8 	bl	8007670 <__malloc_lock>
 80076a0:	4a1c      	ldr	r2, [pc, #112]	; (8007714 <_free_r+0x8c>)
 80076a2:	6813      	ldr	r3, [r2, #0]
 80076a4:	b933      	cbnz	r3, 80076b4 <_free_r+0x2c>
 80076a6:	6063      	str	r3, [r4, #4]
 80076a8:	6014      	str	r4, [r2, #0]
 80076aa:	4628      	mov	r0, r5
 80076ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076b0:	f7ff bfe4 	b.w	800767c <__malloc_unlock>
 80076b4:	42a3      	cmp	r3, r4
 80076b6:	d908      	bls.n	80076ca <_free_r+0x42>
 80076b8:	6820      	ldr	r0, [r4, #0]
 80076ba:	1821      	adds	r1, r4, r0
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf01      	itttt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	1809      	addeq	r1, r1, r0
 80076c6:	6021      	streq	r1, [r4, #0]
 80076c8:	e7ed      	b.n	80076a6 <_free_r+0x1e>
 80076ca:	461a      	mov	r2, r3
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	b10b      	cbz	r3, 80076d4 <_free_r+0x4c>
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d9fa      	bls.n	80076ca <_free_r+0x42>
 80076d4:	6811      	ldr	r1, [r2, #0]
 80076d6:	1850      	adds	r0, r2, r1
 80076d8:	42a0      	cmp	r0, r4
 80076da:	d10b      	bne.n	80076f4 <_free_r+0x6c>
 80076dc:	6820      	ldr	r0, [r4, #0]
 80076de:	4401      	add	r1, r0
 80076e0:	1850      	adds	r0, r2, r1
 80076e2:	4283      	cmp	r3, r0
 80076e4:	6011      	str	r1, [r2, #0]
 80076e6:	d1e0      	bne.n	80076aa <_free_r+0x22>
 80076e8:	6818      	ldr	r0, [r3, #0]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	4401      	add	r1, r0
 80076ee:	6011      	str	r1, [r2, #0]
 80076f0:	6053      	str	r3, [r2, #4]
 80076f2:	e7da      	b.n	80076aa <_free_r+0x22>
 80076f4:	d902      	bls.n	80076fc <_free_r+0x74>
 80076f6:	230c      	movs	r3, #12
 80076f8:	602b      	str	r3, [r5, #0]
 80076fa:	e7d6      	b.n	80076aa <_free_r+0x22>
 80076fc:	6820      	ldr	r0, [r4, #0]
 80076fe:	1821      	adds	r1, r4, r0
 8007700:	428b      	cmp	r3, r1
 8007702:	bf01      	itttt	eq
 8007704:	6819      	ldreq	r1, [r3, #0]
 8007706:	685b      	ldreq	r3, [r3, #4]
 8007708:	1809      	addeq	r1, r1, r0
 800770a:	6021      	streq	r1, [r4, #0]
 800770c:	6063      	str	r3, [r4, #4]
 800770e:	6054      	str	r4, [r2, #4]
 8007710:	e7cb      	b.n	80076aa <_free_r+0x22>
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	200000e0 	.word	0x200000e0

08007718 <_read_r>:
 8007718:	b538      	push	{r3, r4, r5, lr}
 800771a:	4604      	mov	r4, r0
 800771c:	4608      	mov	r0, r1
 800771e:	4611      	mov	r1, r2
 8007720:	2200      	movs	r2, #0
 8007722:	4d05      	ldr	r5, [pc, #20]	; (8007738 <_read_r+0x20>)
 8007724:	602a      	str	r2, [r5, #0]
 8007726:	461a      	mov	r2, r3
 8007728:	f7fd fe91 	bl	800544e <_read>
 800772c:	1c43      	adds	r3, r0, #1
 800772e:	d102      	bne.n	8007736 <_read_r+0x1e>
 8007730:	682b      	ldr	r3, [r5, #0]
 8007732:	b103      	cbz	r3, 8007736 <_read_r+0x1e>
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bd38      	pop	{r3, r4, r5, pc}
 8007738:	200000e8 	.word	0x200000e8

0800773c <_fstat_r>:
 800773c:	b538      	push	{r3, r4, r5, lr}
 800773e:	2300      	movs	r3, #0
 8007740:	4d06      	ldr	r5, [pc, #24]	; (800775c <_fstat_r+0x20>)
 8007742:	4604      	mov	r4, r0
 8007744:	4608      	mov	r0, r1
 8007746:	4611      	mov	r1, r2
 8007748:	602b      	str	r3, [r5, #0]
 800774a:	f7fd fec4 	bl	80054d6 <_fstat>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d102      	bne.n	8007758 <_fstat_r+0x1c>
 8007752:	682b      	ldr	r3, [r5, #0]
 8007754:	b103      	cbz	r3, 8007758 <_fstat_r+0x1c>
 8007756:	6023      	str	r3, [r4, #0]
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	200000e8 	.word	0x200000e8

08007760 <_isatty_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	2300      	movs	r3, #0
 8007764:	4d05      	ldr	r5, [pc, #20]	; (800777c <_isatty_r+0x1c>)
 8007766:	4604      	mov	r4, r0
 8007768:	4608      	mov	r0, r1
 800776a:	602b      	str	r3, [r5, #0]
 800776c:	f7fd fec2 	bl	80054f4 <_isatty>
 8007770:	1c43      	adds	r3, r0, #1
 8007772:	d102      	bne.n	800777a <_isatty_r+0x1a>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b103      	cbz	r3, 800777a <_isatty_r+0x1a>
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	bd38      	pop	{r3, r4, r5, pc}
 800777c:	200000e8 	.word	0x200000e8

08007780 <_init>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	bf00      	nop
 8007784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007786:	bc08      	pop	{r3}
 8007788:	469e      	mov	lr, r3
 800778a:	4770      	bx	lr

0800778c <_fini>:
 800778c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800778e:	bf00      	nop
 8007790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007792:	bc08      	pop	{r3}
 8007794:	469e      	mov	lr, r3
 8007796:	4770      	bx	lr
